

*** 输出"hello word" ***
1.创建一个 Maven 工程,在项目的 java 新建一个 java 类
    @SpringBootApplication
    public class start {
        public static void main(String[] args){
            SpringApplication.run(start.class,args);
        }
    }
  在 java 目录下创建 controller 目录并新建一个控制器
    @RestController
    public class hiController {

        @RequestMapping("/hi")
        public String hi(){
            return "hi!springBoot!";
        }
    }
2.修改 Maven 配置
  IDEA > File > Settings > Build,Execution,Deployment > Maven
  将 Maven home path , User settings file , Local repository 三项更改为本地 maven
3.运行,点击 main 方法 左侧的"run"按钮启动服务
4.在浏览器输入 localhost:8080/hi 即可访问页面

快速创建 springboot 项目
  创建一个项目
  右键项目 > 新建 > 模块..
  使用 Spring Initializr 初始化向导
  1.填写项目名 Group 和模块名 Artifact ,修改包名 Package
  2.Web > Spring Web
    SQL > MySQL Driver
    SQL > mybatis Framework
    以及选择合适 springBoot 版本
  3.finish 即可
  yaml 配置
    server:
      port: 8080
    spring:
      datasource:
        url: jdbc:mysql://localhost:3306/muke
        username: root
        password: root
      web:
        resources:
          static-locations: classpath:/static/,file:D:/onlineEdu/
    # 数据库映射
    mybatis:
      mapper-locations: classpath*:/mapper/*.xml
      #实体扫描，多个package用逗号或者分号分隔
      typeAliasesPackage: com.muke.onlineedu.*.entity
    commonconfig:
      url: http://127.0.0.1:8080
      realpath: D:/onlineEdu
      photopathprefix: /upload/photo
      videopathprefix: /upload/video
      filepathprefix: /upload/file

使用 axios
  npm install axios

添加 mybatis-plus 依赖开发更方便
  <dependency>
    <groupId>com.baomidou</groupId>
    <artifactId>mybatis-plus</artifactId>
    <version>3.5.1</version>
  </dependency>

接口返回结果封装
  在项目内新建 util 包,新建 R.java
  属性和方法按需修改
    public class R<T> implements Serializable {
        private static final long serialVersionUID = 1L;
        private int code = CommonConstants.SUCCESS;
        private String msg = "success";
        private T data;
        public R() {
            super();
        }
        public R(T data) {
            super();
            this.data = data;
        }
        public R(T data, String msg) {
            super();
            this.data = data;
            this.msg = msg;
        }
        public static <T> R<T> ok() {
            return restResult(null, CommonConstants.SUCCESS, null);
        }
        private static <T> R<T> restResult(T data, int code, String msg) {
            R<T> apiResult = new R<>();
            apiResult.setCode(code);
            apiResult.setData(data);
            apiResult.setMsg(msg);
            return apiResult;
        }
        public static <T> R<T> ok(T data) {
            return restResult(data, CommonConstants.SUCCESS, null);
        }
        public static <T> R<T> ok(T data, String msg) {
            return restResult(data, CommonConstants.SUCCESS, msg);
        }
        public static <T> R<T> failed() {
            return restResult(null, CommonConstants.FAIL, null);
        }
        public static <T> R<T> failed(String msg) {
            return restResult(null, CommonConstants.FAIL, msg);
        }
        public static <T> R<T> failed(T data) {
            return restResult(data, CommonConstants.FAIL, null);
        }
        public static <T> R<T> failed(T data, String msg) {
            return restResult(data, CommonConstants.FAIL, msg);
        }
        /**
         * 接口返回成功
         * @param msg
         * @return
         */
        public static <T> R<T> interfaceSuccess(String msg) {
            return restResult(null, InterFaceConstants.SUCCESS, msg);
        }
        /**
         * 接口返回成功 ,返回一个对象信息
         * @param msg
         * @return
         */
        public static <T> R<T> interfaceSuccess(String msg,T t) {
            return restResult(t, InterFaceConstants.SUCCESS, msg);
        }
        /**
         * 接口返回失败
         * @param msg
         * @return
         */
        public static <T> R<T> interfaceFailed(String msg) {
            return restResult(null, InterFaceConstants.FAIL, msg);
        }
        public R(Integer code, String msg) {
            super();
            this.code = code;
            this.msg = msg;
        }
        public R(Throwable e) {
            super();
            this.msg = e.getMessage();
            this.code = CommonConstants.FAIL;
        }
    }

基于 JWT 的登录验证
  添加依赖
    <dependency>
        <groupId>io.jsonwebtoken</groupId>
        <artifactId>jjwt</artifactId>
        <version>0.6.0</version>
    </dependency>
  添加工具类 JWTUtils(见项目 hyld)
    Q:测试 JWT 报错
        ClassNotFoundException: javax.xml.bind.DatatypeConverter
    A:可能你的 JDK 版本过高
      1. JDK 降低至 8
      2.添加依赖
        <dependency>
          <groupId>javax.xml.bind</groupId>
          <artifactId>jaxb-api</artifactId>
          <version>2.3.1</version>
        </dependency>
  添加 redis 依赖
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-redis</artifactId>
    </dependency>
  下载 redis
   在 bin 目录下 新建一个 start.bat 并将如下命令添入
     redis-server.exe redis.windows.conf
   这样以后直接 start.bat 即可方便运行
   可看到默认端口为 6379
   让 redis 持续在后台运行
  配置 redis
    spring:
      redis:
        host: localhost
        port: 6379
  添加 Fasstjson 依赖
    <dependency>
        <groupId>com.alibaba</groupId>
        <artifactId>fastjson</artifactId>
        <version>2.0.7</version>
    </dependency>
  添加依赖,用于 md5
  <dependency>
      <groupId>commons-codec</groupId>
      <artifactId>commons-codec</artifactId>
  </dependency>

Q:启动报错
    Relying upon circular references is discouraged and they are prohibited by default. Update your application to remove the dependency cycle between beans. As a last resort, it may be possible to break the cycle automatically by setting spring.main.allow-circular-references to true.
A:相互/循环-引用/依赖,在 配置(yaml)中加入如下配置
    spring.main.allow-circular-references=true
添加 refresh_token
  <额外模块,优化相关,非必要>

Q:关于循环引用
A:推荐使用 @Resource
    https://baijiahao.baidu.com/s?id=1715596620406357296&wfr=spider&for=pc

Q:重启 IDEA 找不到自定义的类?
A: IDEA > 选项 > 清除缓存...

Q:如何修改 vue3 的 title ?
A:在 vue.config.js 中添加如下配置
    chainWebpack(config) {
      config.plugin('html').tap((args) => { //标题
        args[0].title = '在吗?';
        return args;
      })
    }

Q:如何在每次进行数据库操作时将最终 sql 和参数打印至控制台?
A:

springBoot 官方文档
  https://spring.io/projects/spring-boot#learn

修改配置文件
  在 resources 文件夹下新建 application.properties 文件,添加配置信息
    server.port=8080

部署
  springBoot 可以创建一个可执行的 jar 包
  只需引用 springBoot 提供的插件
  该 jar 包自带整套运行环境,该 jar 包被称为"fat jars"
  在 pom.xml 内添加如下配置
    <packaging>jar</packaging>
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>2.6.4</version>
            </plugin>
        </plugins>
    </build>
  点击 IDEA 右侧的 MAven 栏选中展开当前项目的 Lifecycle 目录
  选中 clean 和 package 并点击运行
  打开当前项目的 target 目录 cmd 进入
  启动项目
    java -jar [项目的 jar 包]

Q:查看依赖配置
A:打开 pom.xml > Ctrl+单击"spring-boot-starter-parent" > Ctrl+单击"spring-boot-dependencies"
  即可查看到所有开发中常用的依赖的版本号

Q:修改默认依赖配置?
A:maven 依赖就近原则,所以需要将自定义的依赖配置写在 starter 前面
  例如修改 mysql 版本,当前版本为
    <mysql.version>8.0.28</mysql.version>

查找 maven 驱动
  https://mvnrepository.com/

导入 mysql 依赖
  在 dependencies 内添加如下配置
    <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
    </dependency>
  在 dependencies 之前添加
    <properties>
        <mysql.version>8.0.16</mysql.version>
    </properties>

Q:改变扫描路径
A:修改主程序的注解 @SpringBootApplication(scanBasePacksges="*.*")
  或直接指定,将 @SpringBootApplication 替换为
    @SpringBootConfiguration
    @EnableAutoConfiguration
    @ComponentScan("*.*")

配置绑定
  读取 properties 并封装到 javaBean 中
  1.@ConfigurationProperties
  2.@EnableConfigurationProperties+@ConfigurationProperties
  3.@Component+@ConfigurationProperties

Q:application.properties 中文乱码问题解决
A:File -> Settings -> Editor -> File Encodings
  将 Properties Files (*.properties) 下的 Default encoding for properties files设置为 UTF-8
  将 Transparent native-to-ascii conversion 前的勾选上
  配置完成后,一定要重新重新重新新建一个 application.properties

Lombok 简化开发
  去除 bean 中的 get()/set() , toString() 以及 构造方法

日志
  在控制器类上添加 @slf4j 注解
  在相应的方法内添加
    log.info("[相关信息]")

热更新
  添加依赖
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-devtools</artifactId>
    </dependency>

Q:SpringBoot启动类没有启动按钮 java 文件变为灰色的解决办法
A:你可能是删了 .idea 文件,右键 pom.xml > Add as Maven Project 即可

Spring Initailizr
  项目初始化向导

properties
  配置文件

yaml
  以数据为中心的配置文件
  字面量:单个且不可再分的值,date,boolean,string,number,null
    k: v
  对象:键值对的集合,map,hash,set,object
    k: {k1:v1,k2:v2,k3:v3}
    k:
      k1: v1
      k2: v2
      k3: v3
  数组:一组按次序排列的值,array,list,queue
    k: [v1,v2,v3]
    k:
      - v1
      - v2
      - v3
  "":不转义
  '':转义

配置提示功能
  <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-configuration-processor</artifactId>
  </dependency>

在打包插件里添加如下配置
在 springBoot 重新打包时不将配置处理器打包到 jar 包里,没有实际影响,只是会使 jar 变大
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.springframework.boot</groupId>
                            <artifactId>spring-boot-configurationprocessor</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
    </build>

静态资源
  在 resources 下创建如下目录
    static
    public
    resources
    /META-INF/resources
  都可以通过 项目根路径/+静态资源名 的方式访问
  静态映射 默认路径(范围) /**
  请求进来,先去找 Controller 是否能处理,不能处理再交给静态资源处理器
  自定义前缀
    与过滤器有关,可在 yaml 中配置
      spring:
        mvc:
          static-path-pattern=/[自定义前缀]/**
    访问方式
      项目根路径/+[自定义前缀]+静态资源名
  改变静态资源路径
    只有指定的路径下的资源能被访问到
      spring:
        resources:
          static-locations: classpath:/[指定路径]/
    也可以是数组形式
      static-locations: [classpath:/[指定路径]/]

导入 jQuery
  </略>

欢迎页
  1.静态资源路径下 index.html
  2.controller 能处理请求
  关于网站图标 ico
    命名格式必须为 favicon.ico 且必须放在静态资源下

配置 mysql
  配置依赖
    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-jdbc</artifactId>
    </dependency>
  资源文件配置(application.properties)
    spring.datasource.url=localhost:3306
    spring.datasource.name=root
    spring.datasource.password=root

添加单元测试
  Ctrl+Shift+T

Q:当 bean 与数据库中的表名不同时
A:添加依赖
		<dependency>
			<groupId>com.baomidou</groupId>
			<artifactId>mybatis-plus-boot-starter</artifactId>
			<version>${mybatisplus.version}</version>
			<exclusions>
				<exclusion>
					<groupId>com.baomidou</groupId>
					<artifactId>mybatis-plus-generator</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
  @TableName("tableName")

Q:When allowCredentials is true, allowedOrigins cannot contain the special value "*"since that cannot be set on the "Access-Control-Allow-Origin"
A:参考别人的项目我也添加了 CorsConfig.java 跨域请求相关的配置
  原配置
    config.addAllowedOrigin("*");
  修改为
    allowedOriginPatterns("*")
  即可

Q:BindingException: Invalid bound statement (not found)
A:1.Mybatis 使用 xml 配置
    a.有可能你的 yaml 配置错误或遗漏
        mybatis:
        # mapper 在 resources 目录下
        mapper-locations: classpath*:/mapper/*.xml
        # 实体扫描,多个package用逗号或者分号分隔
        typeAliasesPackage: com.muke.onlineedu.*.entity

Q:2022-03-21 15:48:12.703 ERROR 16640 --- [nio-8080-exec-1] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Handler dispatch failed; nested exception is java.lang.Error: Unresolved compilation problems: 
    The method setGmAccountStatus(int) is undefined for the type Admin
    The method getGmPower() is undefined for the type Admin
    The method getGmAccountStatus() is undefined for the type Admin
    The method getGmId() is undefined for the type Admin
  ] with root cause
  java.lang.Error: Unresolved compilation problems: 
    The method setGmAccountStatus(int) is undefined for the type Admin
    The method getGmPower() is undefined for the type Admin
    The method getGmAccountStatus() is undefined for the type Admin
    The method getGmId() is undefined for the type Admin
A:莫名其妙报错,弄了半天,什么也没改,然后又莫名其妙的正常了
  或许与改动实体类有关,

不要使用 Lombok!

Q:Description:
  Failed to configure a DataSource: 'url' attribute is not specified and no embedded datasource could be configured.
  Reason: Failed to determine a suitable driver class
  Action:
  Consider the following:
  	If you want an embedded database (H2, HSQL or Derby), please put it on the classpath.
  	If you have database settings to be loaded from a particular profile you may need to activate it (the profiles dev are currently active).
A:添加依赖
    <dependency>
        <groupId>com.baomidou</groupId>
        <artifactId>mybatis-plus</artifactId>
        <version>3.5.1</version>
    </dependency>

四种认证方式：cookie、session、token、jwt

Q:复制粘贴别人的代码结果请求报错 CORS ERROR
    httpServletResponse.setHeader("Access-Control-Allow-Origin", "http://localhost:8081");
A:地址填自己的前端 IP !