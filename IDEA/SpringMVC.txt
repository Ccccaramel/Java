1. MVC 设计模式简介 
  1> MVC 设计不仅限于 Java Web 应用,还包括许多如前端, PHP .NET 等语言
    之所以这样做的根本原因在于解耦各个模块
  2> MVC 是 Model , View 和 Controller 的缩写,分别代表 Web 应用程序中的3种职责
    模型:用于存储数据以及处理用户请求的业务逻辑
    视图:向控制器提交数据,显示模型中的数据
    控制器:根据视图提出的请求判断将请求和数据交给哪个模型处理,将处理后的有关结果交给哪个视图更新显示
  3>基于 Servlet 的 MVC 模式的具体实现如下
    模型:一个或多个 JavaBean 对象,用于存储数据(实体模型,由 JavaBean 类创建)和处理业务逻辑(业务模型,由 Java 类创建)
    视图:一个或多个页面,向控制器提交数据和为模型提供数据显示,页面主要使用
    控制器:

******学习记录******
1.下载并安装 IDEA (详见 IDEA.txt)
2.下载 JDK
3.下载 Maven
****创建工程****
1.在磁盘新建一个文件夹(工程),用于存放项目
2.打开 IDEA > File Open... > 选择上述创建的工程
3.右键工程 > New > Module... > 选择 Maven > Module SDK 选择本地的 SDK > ... > Finish
  新建的项目目录如下:
    [项目名称]
      |---src
      |     |---main文件夹
      |     |     |---java文件夹
      |     |     |---resources文件夹
      |     |---test文件夹
      |           |---java文件夹
      |---pom.xml
      |---springMVC.iml
4.打开 pom.xml
    <groupId>[标识]</groupId>
    <artifactId>[项目唯一ID(与工程名保持一致)]</artifactId>
    <version>1.0-[版本号]</version>
5.在 project 中添加打包方式
    <packaging>war</packaging> // 打包为 war 包
6.在 project 中添加依赖
    <dependencies>
        <!-- SpringMVC -->
        <dependency>
            <groupId>org.springframework</groupId> <!-- 固定 -->
            <artifactId>spring-webmvc</artifactId> <!-- maven refresh 以下 -->
            <version>5.3.15</version> <!-- 可通过联想选择最新版本,maven refresh 以下 -->
        </dependency>
        <!-- ServletAPI -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
        </dependency>
        <!-- spring5 和 thymeleaf 整合包 -->
        <dependency>
            <groupId>org.thymeleaf</groupId>
            <artifactId>thymeleaf-spring5</artifactId>
            <version>3.0.12.RELEASE</version>
        </dependency>
        <!-- 日志 -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.7</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-core</artifactId>
            <version>1.1.7</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-access</artifactId>
            <version>1.1.7</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.1.7</version>
        </dependency>
    </dependencies>
7.添加 web 模块,在 src/main 下新建 webapp 文件夹
  打开 File > Project Structure... > 右侧选择 Modules
  展开当前项目其目录下有一个 web 项,选中它,可看到 Web Resource Directories 下有一个上述的 webapp 模块的路径
  Deployment Descriptors 用来配置项目描述符,即 web.xml ,点击“+”号创建
  默认设置的路径格式为 [项目绝对路径]\WEB-INF\web.xml
                 改成 [项目绝对路径]\src\main\webapp\WEB-INF\web.xml
  系统会自动生成 WEB-INF 文件夹和 web.xml 配置文件
9.配置 web.xml
  作用:注册 servlet ,监听器等等
  打开 web.xml
  a.默认配置方式(了解,不使用)
    指 springMVC 的配置文件默认位于 WEB-INF 下,且默认名称为 <servlet-name>[项目名称]</servlet-name>
    添加如下代码
        <!-- 配置 springMVC 的前端控制器,对浏览器发送的请求进行统一处理 -->
        <servlet>
            <servlet-name>SpringMVC</servlet-name>
            <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        </servlet>

        <servlet-mapping>
            <servlet-name>SpringMVC</servlet-name>
            <url-pattern>/</url-pattern>
        </servlet-mapping>
    / 所匹配的的请求可以是 /login .html .js .css 方式的请求路径
    但是不匹配 .jsp 请求路径的请求
    /* 包括 .jsp 的请求
  b.扩展配置方式
    不将 web.xml 放在 WEB-INF 下, WEB-INF 只放界面
    自定义 springMVC 配置文件的位置和名称
    添加如下代码
        <!-- 配置 springMVC 的前端控制器,对浏览器发送的请求进行统一处理 -->
        <servlet>
            <servlet-name>SpringMVC</servlet-name>
            <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
            <!-- 配置 SpringMVC 配置文件的位置和名称 -->
            <init-param>
                <param-name>contextConfigLocation</param-name> <!-- 上下文配置路径 -->
                <param-value>classpath:springMVC.xml</param-value> <!-- 名称 -->
            </init-param>
            <load-on-startup>1</load-on-startup> <!-- 将 springMVC 前端控制器 DispatcherServlet 初始化时间提前到服务器启动时,提高访问速度 -->
        </servlet>

        <servlet-mapping>
            <servlet-name>SpringMVC</servlet-name>
            <url-pattern>/</url-pattern>
        </servlet-mapping>
    右键右侧项目目录中的 resources 文件夹 > New > XML Configuration File > Spring Config > 填入 springMVC.xml (文件名称自定义,不固定)
10.创建控制器
  右键 src\main\java > New > Java Class > [自定义命名, xxx.controller.xxxController ]
  a.注解+扫描配置控制器
    在 xxx.java 添加如下两行代码
        import org.springframework.stereotype.Controller;
        @Controller
        class xxx{...} <!-- 必须在类名上一行 -->
    springMVC 配置文件
    添加如下代码
        <context:component-scan base-package="com.springmvc.controller[控制模块的相对目录]"></context:component-scan>
    标签爆红?手动打一遍
11.配置 springMVC 配置文件
  打开 springMVC.xml 添加如下代码
    <!-- 配置 Thymeleaf 视图解析器 -->
    <bean id="viewResolver" class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
        <property name="order" value="1"/> <!-- 设置视图解析器的优先级 -->
        <property name="characterEncoding" value="UTF-8"/>
        <property name="templateEngine">
            <bean class="org.thymeleaf.spring5.SpringTemplateEngine">
                <property name="templateResolver">
                    <bean class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">
                        <property name="prefix" value="/WEB-INF/templates/"/> <!-- 视图前缀 -->
                        <property name="suffix" value=".html"/> <!-- 视图后缀 -->
                        <property name="templateMode" value="HTML5"/> <!-- 模板模型 -->
                        <property name="characterEncoding" value="UTF-8"/> <!-- 字符编码 -->
                    </bean>
                </property>
            </bean>
        </property>
    </bean>
12.由上配置所述,需在 WEB-INF 下新建 templates 文件夹并创建 index.html
13.关于index.html 里的 thymeleaf 命名空间
  想要在页面使用 thymeleaf 语法需要在 html 标签里加上如下代码
    <html lang="en" xmlns:th="http://www.thymeleaf.org">
  也可通过配置 IDEA 设置, File > Settings > Editor > File and Code Templates > 选择 HTML File 在模板中加入如下代码即可
    xmlns:th="http://www.thymeleaf.org"
14.添加控制器方法
    class xxx{
        // @RequestMapping("/") 与下等价
        @RequestMapping(value = "/")
        public String index(){
            return "index";
        }
    }
15.配置 tomcat
  Run > Edit Configurations... > 点击"+"号新增配置 > Tomcat Server > Local
  Application server 项初次创建一般没有可选项,点击右侧的 Configure... 按钮进行新增
  Tomcat home 选择本地 tomcat 所在位置即可
  切换至 Deployment 菜单,点击"+"号 > Artifact... > 选 war exploded
  Application context 默认生成,可以修改简单点
  切换至 Server 菜单
  On 'Update' action: 项选择 Redeploy
  On frame deactivation: 项选择 Update classes and resources
  点击 Apply > OK > Run
Q:报错 java 不支持发行版本5 ?
A: IDEA > File > Project Structure... > Project
  查看 Project SDK 和 Project language level 的选项是否与 Modules 中 dependencies > Module SDK 和 Sources > Language level 的选择一样
  不一样则统一,建议 language level 选择 9-Modules,private methods in interfaces etc. (与 SDK 版本一致)
  点击 Apply
  接着打开 IDEA > File > Settings... > Build,Execution,Deployment > Compiler > Java Compiler
  将 Project bytecode version 和 Per-module bytecode version 中当前项目的 module 的 Target bytecode version 修改为 9 (与 tomcat 版本一致)
16.超链接
  在 index.html 中添加如下代码,通过 thmeleaf 语法,获取上下文路径
    <a th:href="@{/target}">link</a>
  在 templates 下新建 target.html
  在 hiController.java 中添加一个新方法
    @RequestMapping("/target")
    public String toTarget(){
        return "target";
    }
  重启 Tomcat Server 即可
17.再创建一个控制器 RequestMappingController.java 与 index.java 控制器包含同样的控制器方法
    @Controller
    public class RequestMappingController {

        @RequestMapping("/")
        public String index(){
            return "index";
        }
    }
  启动 Tomcat Server 时会报错,提示已存在
  所以 @RequestMapping 注解设置映射请求路径不可重复
18.@RequestMapping 注解的位置
  标识一个类:设置映射请求的请求路径的初始信息
  标识一个方法:设置映射请求的请求路径的具体信息
    @RequestMapping("/[标识a]")
    public class XXX{
        @RequestMapping("/[标识b]")
        public String fun(){
            return "[页面名称]";
        }
    }
  此时请求映射所映射的请求的路径为 /[标识a]/[标识b]
    <a th:href="@{/[标识a]/[标识b]}">link</a>
  value 属性可设置多个值
    @RequestMapping(value={"[标识a]","[标识b]",...})
19.@RequestMapping 注解的 method 属性
  通过请求的请求方式匹配请求映射
  该请求映射能够匹配多种请求方式的请求,如果不满足 method 属性则浏览器报错405
20.@RequestMapping 注解的 params 属性(了解)
   请求参数匹配请求映射
   是一个字符串类型的数组
   "param":要求请求映射所匹配的请求必须携带 param 请求参数
   "!param":要求请求映射所匹配的请求不能携带 param 请求参数
   "param=value":要求请求映射所匹配的请求必须携带 param 请求参数且值为 value
   "param!=value":要求请求映射所匹配的请求必须携带 param 请求参数但值不为 value
21.@RequestMapping 注解的 header 属性(了解)
   请求参数匹配请求映射
   是一个字符串类型的数组
   "header":要求请求映射所匹配的请求必须携带 header 请求头信息
   "!header":要求请求映射所匹配的请求不能携带 header 请求头信息
   "header=value":要求请求映射所匹配的请求必须携带 header 请求头信息且值为 value
   "header!=value":要求请求映射所匹配的请求必须携带 header 请求头信息但值不为 value
22.SpringMVC 支持 ant 风格的路径
  ?:表示任意单个字符
  *:表示任意0个或多个字符
  **:表示任意一层或多层目录
  在使用"**"时,只能使用"/**/xxx"方式
24.springMVC 支持路径中的占位符
  前端:
    <a th:href="@{/pathTest/23/Tom}">占位符</a>
  控制器:
    @RequestMapping("/pathTest/{id}/{name}")
    public String pathTest(@PathVariable("id")int id,@PathVariable("name")String name){
        System.out.println("id:"+id+",name:"+name);
        return "test";
    }
25.springMVC 获取参数
  1.通过 ServlertAPI 获取(很少用)
  2.通过控制器方法的形参获取请求参数
    @RequestParam 是将请求参数和控制器方法的形参创建映射关系
      属性:
        value:参数名,与前台传递的参数名保持一致,也可不设置,但控制器的参数名必须与前台相同
        required:是否为必须传输该参数,ture:必须传递该参数,false:可不传递该参数
        defaultValue:默认值
    @RequestHeader:将请求头信息和控制器方法的形参创建映射关系(用法同上)
    @CookieValue:将 cookie 数据和控制器方法的形参创建映射关系(用法同上)
26.后台获取请求参数乱码?
  解决 get 请求乱码
    打开 tomcat 的 server.xml 定位到 Connector 标签,添加 URIEncoding="UTF-8"
  解决 post 请求以及响应乱码
    打开 web.xml 添加如下代码
      <!-- 配置编码过滤器 -->
      <filter>
          <filter-name>CharacterEncodingFilter</filter-name>
          <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
          <init-param>
              <param-name>encoding</param-name>
              <param-value>UTF-8</param-value>
          </init-param>
          <init-param>
              <param-name>forceResponseEncoding</param-name>
              <param-value>true</param-value>
          </init-param>
      </filter>
      <filter-mapping>
          <filter-name>CharacterEncodingFilter</filter-name>
          <url-pattern>/*</url-pattern>
      </filter-mapping>
27.域对象共享数据
  1.使用 servletAPI 向 request 域对象共享数据
  2.使用 ModelAndView 向 request 域对象共享数据(推荐使用)
  3.使用 Mode 向 request 域对象共享数据
  4.使用 Map 向 request 域对象共享数据
  5.使用 ModelMap 向 request 域对象共享数据
    *model ModelMap Map 类型的参数本质都是 BindingAwareModelMap 类型
  6.向 session 域共享数据
    后台:
      @RequestMapping("/testSession")
      public String testSession(HttpSession session){
          session.setAttribute("session1","s1");
          return "test";
      }
    前台:
      <p th:text="${session.session1}"></p>
  7.向 application 域共享数据
    后台:
      @RequestMapping("/testApplication")
      public String testApplication(HttpSession session){
          ServletContext servletContext = session.getServletContext();
          servletContext.setAttribute("application1","a1");
          return "test";
      }
    前台:
      <p th:text="${application.application1}"></p>
28.springMVC 的视图
  springMVC 的视图是 View 接口,视图的作用于渲染数据,将模型 model 中的数据展示给用户
  种类有很多,默认有转发视图和重定向视图
  当工程引入 jstl 的依赖,转发视图会自动转换为 jstlView
  若使用的视图技术为 thymeleaf ,在 springMVC 的配置文件中配置了 thymeleaf 的视图解析器
  由此视图解析器之后所得到的是 thymeleafView
  1.thymeleafView
    当控制器方法中所设置的视图名称没有任何前缀时
    此时的视图名称会被 springMVC 配置文件中视图解析器解析
    视图名称拼接视图前缀和视图后缀所得到的最终路径会通过转发的方式实现跳转
  2.转发视图
    springMVC 中默认的转发视图是 InternalResourceView
    当控制器方法中所设置的视图名称以"forward:"为前缀时,创建 InternalResourceView 视图
    此时的视图名称不会被 springMVC 配置文件中所配置的视图解析器解析
    而会将前缀"forward:"去掉,剩余部分作为最终路径通过转发的方式实现跳转
  3.重定向视图
    springMVC 中默认的重定向视图是 RedirectView
    当控制器方法中所设置的视图名称以"redirect:"为前缀时,创建 RedirectView 视图
    <略,同上>
  4.视图控制器 view-controller
    当控制器方法中,仅仅用来实现页面跳转(即只需要设置视图名称时),可以将处理器方法使用 view-controller 进行表示
    在 springMVC.xml 添加如下代码
      <mvc:view-controller path="/" view-name="index"></mvc:view-controller>
    它与控制器中的请求映射作用相同
      @RequestMapping(value = "/")
      public String index() {
          return "index";
      }
    如果这样做,那么控制器中的其它所有请求映射将会失效
    此时需要在 springMVC 的核心配置文件中设置开启 mvc 注解驱动的标签
      <!-- 开启 MVC 的注解驱动 -->
      <mvc:annotation-driven />
29.RESTFul
  Representational State Transfer,表现层资源状态转移
  资源是一种看待服务器的方式,即将服务器看作是由很多离散的资源组成,资源是一个抽象的概念,文件是资源,数据库的一张表也是资源
  HTTP 协议的4个表示操作方式的动词: GET(获取资源) POST(新建资源) PUT(更新资源) DELETE(删除资源)
  统一规范
30.模拟增删改查
  <略>
31.HttpMessageConverter
  报文信息转换器,将请求报文转换为 Java 对象,或将 Java 对象转换为请求报文
  1.@RequestBody 获取请求体信息,需要在控制器方法设置一个形参
      @RequestMapping("/testRequestBody")
      public String testRequestBody(@RequestBody String res){
          System.out.println("res:"+res);
          return "target";
      }
  2.@RequestEntity 封装请求报文的一种类型
    可通过 getHeader() 获取请求头信息,通过 getBody() 获取请求体信息
32.springMVC 处理 json
  导入 jackson 依赖
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>2.13.1</version>
    </dependency>
  开启 MVC 的注解驱动
    <mvc:annotation-driven />
  可将响应到浏览器的 java 对象转换为 json 格式的字符串
33.@RestController
  标识在控制器的类上,相当于为类添加了 @Controller注解并为其中的每一个方法添加了 @ResponseBody 注解
34.ResponseEntity
  用于控制器方法的返回值类型,该控制器方法的返回值就是响应浏览器的响应报文
  1.文件下载
    添加 axios.js 文件
  2.文件上传
    添加依赖
      <dependency>
        <groupId>commons-fileupload</groupId>
        <artifactId>commons-fileupload</artifactId>
        <version>1.4</version>
      </dependency>
35.新建的资源文件夹没有被打包?
  右侧 Maven > Lifecycle > 点击 package
  依旧无效则检查 Maven 是否配置正确
  File > Settings... > Build,Execution,Deployment > Build Tools > Maven
  可改成本地的 Maven 的 settings.xml
  报错"不再支持源选项 5。请使用 7 或更高版本。"
  在 pom.xml 中添加如下代码
    <properties>
      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
      <maven.compiler.source>[JDK 版本号(取整)]</maven.compiler.source>
      <maven.compiler.target>[JDK 版本号(取整)]</maven.compiler.target>
    </properties>
36.拦截器
  用于拦截控制器方法的执行
  在 springMVC 的配置文件中进行配置
    <!-- 配置拦截器 -->
    <mvc:interceptors>
      <!--方式1-->
      <!--<bean class="com.springmvc.interceptors.FirstInterceptor"></bean>  -->
      <!--方式2-->
      <!--<ref bean="firstInterceptor"></ref>-->
      <!--方式3-->
      <mvc:interceptor>
          <mvc:mapping path="/**"/> <!-- /* 表示拦截一层; /* 表示匹配多层,即拦截所有请求 -->
          <mvc:exclude-mapping path="/"/> <!-- 排除主页 -->
          <ref bean="firstInterceptor"></ref>
      </mvc:interceptor>
    </mvc:interceptors>
37.异常处理器
  springMVC 提供了一个处理控制器方法执行过程中所出现的异常的接口: HandlerExceptionResolver
  HandlerExceptionResolver 接口的实现类: DefaultHandlerExceptionResolver 和 SimpleMappingExceptionResolver
  1.基于配置的异常处理
    在 springMVC 添加如下配置
      <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
          <props>
            <prop key="java.lang.ArithmeticException">error</prop>
          </props>
        </property>
        <!-- 设置将异常信息共享在请求域中的键 -->
        <property name="exceptionAttribute" value="ex"></property>
      </bean>
    请求映射
      @RequestMapping("/testExceptionHandler")
      public String testExceptionHandler(){
          System.out.println(1/0);
          return "test";
      }
    新建一个 error 页面
      <p th:text="${ex}"></p>
  2.基于注解的异常处理
      @ControllerAdvice
      public class ExceptionController {
          @ExceptionHandler(value = {ArithmeticException.class,NullPointerException.class})
          public String testException(Exception ex, Model model){
              model.addAttribute("ex",ex);
              return "error2";
          }
      }
1.注解配置 springMVC
  创建一个 Maven 项目, pom.xml 同上
  在 src\main 下新建 webapp\WEB-INF 两个文件夹即可
  <略,见 github >
2.springMVC 常用组件
  1.DispatcherServlet:前端控制器,不需要工程师开发,由框架提供
    作用:统一处理请求和响应,整个流程控制的中心,由它调用其它组件处理用户的请求
  2.HandlerMapping:处理器映射器,不需要工程师开发,由框架提供
    作用:根据请求的 url , method 等信息查找 Handler ,即控制器方法
  3.Handler:处理器,需要工程师开发
    作用:在 DispatcherServlet 的控制下 Handler 对具体的用户请求进行处理
  4.HandlerAdapter:处理器适配器,不需要工程师开发,由框架提供
    作用:通过 HandlerAdapter 对处理器(控制器方法)进行执行
  5.viewResolver:视图解析器,不需要工程师开发,由框架提供
    作用:进行视图解析,得到相应的视图,例如: ThymeleafView InternalResourceView  RedirectView
  6.View:视图,不需要工程师开发,由框架提供
    作用:将模型数据通过页面展示给用户
3.springMVC 的执行流程
  1.用户向服务器发送请求,请求被 springMVC 前端控制器 DispatcherServlet 捕获
  2.DispatcherServlet 对请求 URL 进行解析,得到请求资源标识符(URI),判断请求 URI 对应的映射是否存在
    1>存在
       根据该 URI 调用 HandlerMapping 获得该 Handler 配置的所有相关的对象(包括 Handler 对象以及 Handler 对象对应的拦截器)
       最后以 HandlerExceptionChain 执行链对象的形式返回
       DispatcherServlet 根据获得的 Handler 选择一个合适的 HandlerAdapter
       如果成功获得 则开始执行拦截器的 preHandler() 方法【正向】
       提取 request 中的模型数据,填充 Handler 入参,并执行 Handler() 方法,处理请求
       在填充 Handler 的入参过程中,根据配置 spring 将执行一些额外操作
        1)HttpMessageConverter:将请求信息转换成一个对象,将对象转换为指定的响应信息
        2)数据转换:对请求信息进行数据转换,如 String 转换成 Integer Double 等
        3)数据格式化:对请求信息进行数据格式化,如将字符串转换成格式化数字或格式化日期等
        4)数据验证:验证数据的有效性,验证结果存储到 BindingResult 或 Error 中
      Handler 执行完成后,向 DispatcherServlet 返回一个 ModelAndView 对象
      此时将开始执行拦截器的 postHandler() 方法【逆向】
      根据返回的 ModelAndView(此时会判断是否存在异常,存在则执行 HandlerExceptionResolver 进行异常处理) 选择一个合适的 viewResolver 进行视图解析
      根据 Model 和 View 来渲染视图,渲染完成后执行拦截器的 afterCompletion() 方法【逆向】
      将渲染结果返回给客户端
    2>不存在
      再判断是否配置了 mvc:default-servlet-handler
      如果没配置,则控制台报映射查找不到,客户端显示 404 错误
      如果有配置,则访问目标资源(一般为静态资源, js css html ),若找不到客户端显示 404 错误
