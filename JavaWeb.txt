Q:如何在 html 文件中导入jquery?
A:先在 WebRoot 下创建一个文件夹 js ,将 jquery.js 放入
  然后在 html 中的 <head> 内<script type="text/javascript" src="js/*.js"></script> 即可

Q:如何在浏览器中查看网站的 jquery 的版本?
A:在 Console 下输入 $.fn.jquery 即可

* jquery.js 必须放在 bootstrap.js 之前

*完整导入样例语句如下
  <link href="bootstrap-4.4.1-dist/css/bootstrap.css" rel="stylesheet"></script>
	<script type="text/javascript" src="js/jquery-3.4.1/jquery-3.4.1.js"></script>
  <script src="bootstrap-4.4.1-dist/js/bootstrap.js"></script>
  
Q:如何修改 Tomcat 服务器端口?
  打开 Tomcat/conf/server.xml ,找到
   <Connector port="8080" protocol="HTTP/1.1"
                 connectionTimeout="20000"
                 redirectPort="8443" />
  将 port 的值修改为未被使用的端口并保存

Q:什么是虚拟目录的映射?
A: Web 应用开发好后,若想提供外界访问,需要把 Web 应用所在目录交给 Web 服务器管理,这个过程称为虚拟目录的映射

Q:如何在 Tomcat 中进行虚拟映射?
A1:首先找到 Tomcat 中的server.xml 文件的 host 元素,在其内添加 <Context path="/[虚拟目录]" docBase="[Web 应用所在的绝对路径]"/> ,样例如下
  <Host name="localhost"  appBase="webapps"
    unpackWARs="true" autoDeploy="true"
    xmlValidation="false" xmlNamespaceAware="false">
      <Context path="/JavaWebApp" docBase="C:\Users\ding\Workspaces\MyEclipse 10\test2\WebRoot"/>
  </Host>
   Context 表示上下文,代表一个 JavaWeb 应用
   path 用来配置虚拟目录,必须以"/"开头
   docBase 配置此虚拟目录对应在硬盘上的 Web 应用所在目录
  记得必须重启 Tomcat 才会生效! 
  打开浏览器输入 http://localhost:8080/[虚拟目录]/index.jsp ,若能访问则配置成功
A2:你可以直接将项目创建在 Tomcat 的webapps 下, Tomcat 会把其下所有的 Web 应用自动映射成虚拟目录
A3:在 Tomcat 的 \conf\Catalina\localhost 目录下添加一个 [虚拟目录名].xml 文件,在内添加 <Context docBase="[Web 应用所在的绝对路径]"/> 后保存
  其优点是修改之后无需重启 Tomcat
  
Q:如何配置虚拟主机?
A:打开 Tomcat 的 server.xml ,更改 Host 标签的 name 的文本内容即可,其默认值为 localhost
  打开 电脑的 C:\Windows\System32\drivers\etc\hosts 文件,在末行添加 127.0.0.1 [域名] 保存即可
  打开浏览器输入 [域名]:[端口号]/[虚拟目录]/index.jsp 若能访问则配置成功
  
Q: JavaWeb 应用的组成结构及其意义
A: JavaWebApp       Web 应用所在目录
      |------ html,jsp,css,js 文件等      在 Web 应用根目录下,根目录下的文件外界可以直接访问
      |------ WEB-INF 目录      包含 java 类, java 包, web 应用的配置文件,该目录下的文件外界无法直接访问,由 Web 服务器负责调用
                 |------ classes 目录       java 类
                 |------ lib 目录       Java 类运行所需的 jar 包
                 |------ web.xml 文件       Web 应用的配置文件

Q:浏览器与服务器交互的过程
A:访问http://www.gacl.cn:8080/JavaWebDemo/test.jsp
  浏览器                     Window 的host文件                     dns 服务器                     Web 服务器                     test.jsp
     |---查询主机名对应的 ip --->|                                   |                               |                             |     
     |---------------------查询主机名对应的 ip --------------------->|                               |                             |
     |---------------------------------根据查询的 ip 连上 Web 服务器--------------------------------->|                            |
     |------------------------------向服务器发送 http 请求( stream 流)------------------------------>|(解析主机名, Web 应用及资源)  |
     |                                                                                              |------获取 Web 资源数据------>|
     |<----------------------------------------------------回送数据( stream 流)----------------------------------------------------|

*破解后的 MyEclipse 无法新建 Web 项目,又不想使用IDEA, Eclipse 虽然麻烦但毕竟曾经使用过

Q:如何使用 Eclipse 创建 Web 项目?
A: Tomcat 下载
    下载 Tomcat 放在硬盘里即可
  创建 Server 服务
    打开 Eclipse -> Window -> Preferences ,进入 Preferences 设置对话框,展开左侧的 Server 项
    选择 Runtime Environment ,用鼠标单击右侧的 Add... 按钮,对话框其列出了当前 Eclipse 支持的 Tomcat 版本
    选择与你本地的Tomcat 的版本,单击 Next 进入配置 Tomcat Server 对话框
     Name 建议已你的 Tomcat 同名(eg:apache-tomcat-9.0.34 ,也可按系统默认名)
     Tomcat installation directory 指向 Tomcat 的所在路径(eg:D:\apache-tomcat-9.0.34)
    单击 Finish 回到 Preferences 对话框,发现新建的 Tomcat 服务在对话框的列表中列出
  添加 Server 服务
     Window -> Show View -> Server
    如果没有 Server , Window -> Other... -> Server,你可以在 Server 窗口中通过 New -> Server 创建更多的 Server
  构建 Java Web 项目
     File -> New -> Dynamic Web Project
    如果没有 Dynamic Web Project , File -> New -> Other... -> New Web -> Dynamic Web Project
    单击 Next 进入 Dynamic Web Project 设置对话框,不要直接点击 Finish 
    一步一步点击 Next 直到 Web Module 对话框,勾选 Generate web.xml deployment descriptor 项
    若没有勾选此项会导致 WEB-INF 目录下无 web.xml 文件,该文件会有用到,最后点击 Next 完成
    当然若创建时忘记勾选,右键项目名 Java EE Tools -> Generate web.xml deployment descriptor 即可自动生成
  创建 JSP/HTML 文件
     JSP 是 Java 服务页面, JSP 混合了 HTML , Java 程序,特有的 JSP 标记内容,形成了 JSP 文件
    用户通过浏览器访问 JSP 页面时, JSP 在服务器端执行 Java 程序和 JSP 标记,从数据库获取内容或进行处理操作
    将处理后的结果转为 HTML 内容返回给浏览器
    在 webContent 根目录下创建 index.jsp 并保存即可
  运行 Server
    开启 Server ,选择一个 Server 右键 Start 即可
    在 index.jsp 内右键 Run As -> Run on Server , Eclipse 会打开自带的浏览器并打开页面
    在本地浏览器同样可以访问

<开了个小差,看了个小新闻,一个自称24岁的x女士去整容机构整眼角,之所以选y机构是因为朋友介绍说有80%的返点,半年后找到新闻记者(类似于1818?)
说自己因眼角外翻没法上班外出见人,已经呆在家里半年,另外她是贷款(2.5w)整容,每月还两千,当她带记者去机构时前台说X机构转让
一波三折之后找到负责人,负责人表示愿意帮x还清贷款
当记者问x对处理结果是否满意时x的回答是
很满意
???>

Q:Eclipse -> Window -> Preferences ,进入 Preferences 后展开左侧无 Server 项如何解决?
A:获取你的 Eclipse 版本类型,点击 help -> About Eclipse IDE ,记住你的 Eclipse 版本号
   help -> Install New Software... -> add... ,
   Name 填你的版本号(eg:2020-03),一般会自动填好, Location 填 http://download.eclipse.org/releases/2020-03
  列表会自动加载,勾选 Web,XML,Java EE and OSGi Enterprise Development ,最后一路 [Next|I accpet|Finish] 并等待下载完毕即可
  
Q:如何将项目部署到本地的 Tomcat 中运行?
A:在 Eclipse 的左侧目录空白处右键 -> Export -> WAR file ,选择存放 war 文件的位置
  建议直接放入本地 Tomcat 的 webapps 目录下即可
  运行 Tomcat -> bin -> startup.bat 会自动解压 webapps 目录下所有的 war 文件
  浏览器即可直接访问

* Tomcat 的体系结构 
  浏览器<--- HTTP 协议 ------|                |---> Connector ------>|        |-Host-|--- Context
  浏览器<--- HTTPS 协议 -----|-Server-Service-|---> Connector ------>|-Engine-|      |--- Context
   JK 连接程序<--- AJP 协议 -|                |---> Connector ------>|        |-Host-|--- Context
  其它程序<--- 其它 协议 ----|                |---> Connector ------>|               |--- Context
   Tomcat 服务器启动是基于一个 server.xml 文件的, Tomcat 启动的时候首先会启动一个 Server
   Server 里面就会启动 Service , Service 里面就会启动多个"Connector(连机器)",每个连接器都在等待客户机的连接
  当有用户使用浏览器去访问服务器上面的 Web 资源时,首先是连接到 Connector(连接器) , Connector 是不处理用户请求的
  而是将用户的请求交给一个 Engine(引擎) 去处理, Engine 接收到请求后就会解析用户想要访问的 Host
  然后将请求交给相应的 Host , Host 收到请求后就会解析出用户想要访问这个 Host 下面的哪个 Web 应用
  一个 Web 应用对应一个 Context

互联网上的加密原理
   Tomcat 服务器启动时会启动多个 Connector , 而 Tomcat 服务器的连接器又分为加密连接器和非加密连接器
   当去访问例如 http://localhost:9090/ding/index.jsp 时就是使用9090端口的连接器
    <Connector port="9090" protocol="HTTP/1.1"
      connectionTimeout="20000"
      redirectPort="8443" />
  这是一个没有加密的连接器,请求过程是不加密的
  1.对称加密
    采用单钥密码系统的加密方法,同一个密钥可以同时用作信息的加密和解密,这种加密方法称为对称加密,也称单钥加密
    需要对加密和解密使用相同密钥的加密算法,由于其速度快,对称性加密通常在消息发送方需要加密大量数据时使用
    对称性加密也称为密钥加密,这种加密方法的双方使用方式用同样的密钥进行加密和解密,密钥是控制加密及解密过程的指令
    算法是一组规则,规定如何进行加密和解密,加密的安全性不仅取决于加密算法本身,密钥管理的安全性更是重要
    加密和解密都使用同一个密钥,如何把密钥安全地传递到解密者手上成了必须要解决的问题
    常用的对称加密有: DES , IDEA , RC2 , RC4 , SKIPJACK , RC5 , AES算法等
  2.非对称加密
    非对称加密需要两个密钥:公开密钥和私有密钥,公开密钥与私有密钥是一对
    如果公开密钥对数据进行加密,只有对应的私有密钥才能解密
    如果用私有密钥对数据进行加密,那么只有用对应的公开密钥才能解密
    因为加密和解密使用的是两个不同的密钥,所以这种算法叫作非对称加密算法
    非对称加密算法实现机密信息交换的基本过程:
      a.甲方生成一对密钥并将其中的一把作为公用密钥向其它方公开
      b.得到该公钥密钥的乙方使用该密钥对机密信息进行加密后再发送给甲方
      c.甲方再用自己保存的另一把专用密钥对加密后的信息进行解密
      d.另一方面,甲方可以使用乙方的公钥对机密信息进行签名后再发送给乙方
      e.乙方再用自己的私钥对数据进行验签
    非对称加密工作原理:
      a. A 要向 B 发送信息, A 和 B 都要产生一对用于加密和解密的公钥和私钥
      b. A 的私钥保密, A 的公钥告诉 B ; B 的私钥保密, B 的公钥告诉 A
      c. A 要给 B 发送信息时, A 用 B 的公钥加密信息,因为 A 知道 B 的公钥
      d. A 将这个消息发送给 B(已经用 B 的公钥加密信息)
      e. B 收到消息后, B 用自己的私钥解密 A 的信息,其它所有收到这个报文的人都无法解密,因为只有 B 有私钥
    发送方使用接收方的公钥对数据加密,而接收方则使用自己的私钥解密,这样,信息就可以安全无误地到达目的地了
    即使被第三方截获,由于没有相应的密钥,也无法进行解密,通过数字的手段保证加密过程是一个不可逆过程,即只有用私钥才能解密
    非对称加密依然没有解决数据传输的安全性问题
    比如 A 想向 B 发数据, B 首先生成一对密钥(公钥和密钥),然后将公钥发给 A
     A 拿到 B 发给它的公钥后就可以使用公钥加密数据后发给 B
    然而 B 公钥发送给 A 的过程中很有可能被第三方 C 截获, C 截获到 B 的公钥后也使用 B 的公钥加密数据然后发送给 B
     B 接收到数据后就晕了,因为无法判断接收到的数据到底是 A 发的还是 C 发的
    另外当 C 截获到 B 发的公钥后, C 可以自己生成一对密钥,然后发给 A , A 拿到公钥后就以为是 B 发给它的
    然后就使用公钥加密数据发送给 B ,而 B 收到 A 发给它的数据后反而解不开了,因为数据是用 C 的公钥加密的
     B 没有 C 的密钥,所以无法解密
    综上所述,非对称加密存在一个问题:
       A 想向 B 发数据, A 如何确定拿到的公钥一定是 B 发的呢?如何解决这个问题呢?
      只能靠第三方机构( CA 机构,即证书授权中心( Certificate Authority ),或称证书授权机构)来担保
       A 想向 B 发数据, B 首先将公钥发给 CA 机构, CA 机构拿到 B 的公钥后跑到 B 的家里问:这是你发的公钥吗?
       B 确认后说是的,此时 CA 机构就会为 B 的公钥做担保,生成一份数字证书给 B ,数字证书包含了 CA 的担保认证签名和 B 的公钥
       B 拿到 CA 的这份数字证书后就发给 A , A 拿到数字证书后,看到上面有 CA 的签名,就可以确定当前拿到的公钥是 B 发的
      那么就可以放心大胆的使用公钥加密数据并发送给 B 了