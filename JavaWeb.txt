Q:如何在 html 文件中导入jquery?
A:先在 WebRoot 下创建一个文件夹 js ,将 jquery.js 放入
  然后在 html 中的 <head> 内<script type="text/javascript" src="js/*.js"></script> 即可

Q:如何在浏览器中查看网站的 jquery 的版本?
A:在 Console 下输入 $.fn.jquery 即可

*  jquery.js 必须放在 bootstrap.js 之前

* 完整导入样例语句如下
  <link href="bootstrap-4.4.1-dist/css/bootstrap.css" rel="stylesheet"></script>
	<script type="text/javascript" src="js/jquery-3.4.1/jquery-3.4.1.js"></script>
  <script src="bootstrap-4.4.1-dist/js/bootstrap.js"></script>
  
Q:如何修改 Tomcat 服务器端口?
  打开 Tomcat/conf/server.xml ,找到
   <Connector port="8080" protocol="HTTP/1.1"
                 connectionTimeout="20000"
                 redirectPort="8443" />
  将 port 的值修改为未被使用的端口并保存

Q:什么是虚拟目录的映射?
A: Web 应用开发好后,若想提供外界访问,需要把 Web 应用所在目录交给 Web 服务器管理,这个过程称为虚拟目录的映射

Q:如何在 Tomcat 中进行虚拟映射?
A1:首先找到 Tomcat 中的server.xml 文件的 host 元素,在其内添加 <Context path="/[虚拟目录]" docBase="[Web 应用所在的绝对路径]"/> ,样例如下
  <Host name="localhost"  appBase="webapps"
    unpackWARs="true" autoDeploy="true"
    xmlValidation="false" xmlNamespaceAware="false">
      <Context path="/JavaWebApp" docBase="C:\Users\ding\Workspaces\MyEclipse 10\test2\WebRoot"/>
  </Host>
   Context 表示上下文,代表一个 JavaWeb 应用
   path 用来配置虚拟目录,必须以"/"开头
   docBase 配置此虚拟目录对应在硬盘上的 Web 应用所在目录
  记得必须重启 Tomcat 才会生效! 
  打开浏览器输入 http://localhost:8080/[虚拟目录]/index.Jsp ,若能访问则配置成功
A2:你可以直接将项目创建在 Tomcat 的webapps 下, Tomcat 会把其下所有的 Web 应用自动映射成虚拟目录
A3:在 Tomcat 的 \conf\Catalina\localhost 目录下添加一个 [虚拟目录名].xml 文件,在内添加 <Context docBase="[Web 应用所在的绝对路径]"/> 后保存
  其优点是修改之后无需重启 Tomcat
  
Q:如何配置虚拟主机?
A:打开 Tomcat 的 server.xml ,更改 Host 标签的 name 的文本内容即可,其默认值为 localhost
  打开 电脑的 C:\Windows\System32\drivers\etc\hosts 文件,在末行添加 127.0.0.1 [域名] 保存即可
  打开浏览器输入 [域名]:[端口号]/[虚拟目录]/index.Jsp 若能访问则配置成功
  
Q: JavaWeb 应用的组成结构及其意义
A: JavaWeb    web 工程的名称  
      |------ src           Java 程序的开发目录,用于编写所有 java 程序      
      |------ WebContent    Web 应用所在目录
                  |------ html,Jsp,css,js 文件等     在 Web 应用根目录下,根目录下的文件外界可以直接访问
                  |------ WEB-INF 目录               包含 java 类, java 包, web 应用的配置文件,该目录下的文件外界无法直接访问,由 Web 服务器负责调用
                            |------ classes 目录    java 类
                            |------ lib 目录        Java 类运行所需的 jar 包
                            |------ web.xml 文件    Web 应用的配置文件

Q:浏览器与服务器交互的过程
A:访问http://www.gacl.cn:8080/JavaWebDemo/test.Jsp
  浏览器                     Window 的host文件                     dns 服务器                     Web 服务器                     test.Jsp
     |---查询主机名对应的 ip --->|                                   |                               |                             |     
     |---------------------查询主机名对应的 ip --------------------->|                               |                             |
     |---------------------------------根据查询的 ip 连上 Web 服务器--------------------------------->|                            |
     |------------------------------向服务器发送 http 请求( stream 流)------------------------------>|(解析主机名, Web 应用及资源)  |
     |                                                                                              |------获取 Web 资源数据------>|
     |<----------------------------------------------------回送数据( stream 流)----------------------------------------------------|

* 破解后的 MyEclipse 无法新建 Web 项目,建议使用 Eclipse ,免费但需要进行一些手动配置

Q:如何使用 Eclipse 创建 Web 项目?
A: Tomcat 下载
    下载 Tomcat 放在硬盘里即可
  创建 Server 服务
    打开 Eclipse -> Window -> Preferences ,进入 Preferences 设置对话框,展开左侧的 Server 项
    选择 Runtime Environment ,用鼠标单击右侧的 Add... 按钮,对话框其列出了当前 Eclipse 支持的 Tomcat 版本
    选择与你本地的Tomcat 的版本,单击 Next 进入配置 Tomcat Server 对话框
     Name 建议已你的 Tomcat 同名(eg:apache-tomcat-9.0.34 ,也可按系统默认名)
     Tomcat installation directory 指向 Tomcat 的所在路径(eg:D:\apache-tomcat-9.0.34)
    单击 Finish 回到 Preferences 对话框,发现新建的 Tomcat 服务在对话框的列表中列出
  添加 Server 服务
     Window -> Show View -> Server
    如果没有 Server , Window -> Other... -> Server,你可以在 Server 窗口中通过 New -> Server 创建更多的 Server
  构建 Java Web 项目
     File -> New -> Dynamic Web Project
    如果没有 Dynamic Web Project , File -> New -> Other... -> New Web -> Dynamic Web Project
    单击 Next 进入 Dynamic Web Project 设置对话框,不要直接点击 Finish 
    一步一步点击 Next 直到 Web Module 对话框,勾选 Generate web.xml deployment descriptor 项
    若没有勾选此项会导致 WEB-INF 目录下无 web.xml 文件,该文件会有用到,最后点击 Next 完成
    当然若创建时忘记勾选,右键项目名 Java EE Tools -> Generate web.xml deployment descriptor 即可自动生成
  创建 Jsp/HTML 文件
     Jsp 是 Java 服务页面, Jsp 混合了 HTML , Java 程序,特有的 Jsp 标记内容,形成了 Jsp 文件
    用户通过浏览器访问 Jsp 页面时, Jsp 在服务器端执行 Java 程序和 Jsp 标记,从数据库获取内容或进行处理操作
    将处理后的结果转为 HTML 内容返回给浏览器
    在 webContent 根目录下创建 index.Jsp 并保存即可
  运行 Server
    开启 Server ,选择一个 Server 右键 Start 即可
    在 index.Jsp 内右键 Run As -> Run on Server , Eclipse 会打开自带的浏览器并打开页面
    在本地浏览器同样可以访问
    *当配置 https 连接器后使用 Eclipse 的 Server 访问 https://... 在经过最大启动时间后会自动结束 Server
      暂时不知道怎么解决,建议开启本地的 Tomcat 手动开启即可正常访问 

<
开了个小差,看了个小新闻,一个自称24岁的x女士去整容机构整眼角,之所以选y机构是因为朋友介绍说有80%的返点,半年后找到新闻记者(类似于1818?)
说自己因眼角外翻没法上班外出见人,已经呆在家里半年,另外她是贷款(2.5w)整容,每月还两千,当她带记者去y机构时前台说y机构转让
一波三折之后找到y机构负责人,负责人表示愿意帮x还清贷款
当记者问x对处理结果是否满意时x的回答是
很满意
???
>

Q:Eclipse -> Window -> Preferences ,进入 Preferences 后展开左侧无 Server 项如何解决?
A:获取你的 Eclipse 版本类型,点击 help -> About Eclipse IDE ,记住你的 Eclipse 版本号
   help -> Install New Software... -> add... ,
   Name 填你的版本号(eg:2020-03),一般会自动填好, Location 填 http://download.eclipse.org/releases/2020-03
  列表会自动加载,勾选 Web,XML,Java EE and OSGi Enterprise Development ,最后一路 [Next|I accpet|Finish] 并等待下载完毕即可
  
Q:如何将项目部署到本地的 Tomcat 中运行?
A:在 Eclipse 的左侧目录空白处右键 -> Export -> WAR file ,选择存放 war 文件的位置
  建议直接放入本地 Tomcat 的 webapps 目录下即可
  运行 Tomcat -> bin -> startup.bat 会自动解压 webapps 目录下所有的 war 文件
  浏览器即可直接访问

*  Tomcat 的体系结构 
  浏览器<--- HTTP 协议 ------|                |---> Connector ------>|        |-Host-|--- Context
  浏览器<--- HTTPS 协议 -----|-Server-Service-|---> Connector ------>|-Engine-|      |--- Context
   JK 连接程序<--- AJP 协议 -|                |---> Connector ------>|        |-Host-|--- Context
  其它程序<--- 其它 协议 ----|                |---> Connector ------>|               |--- Context
   Tomcat 服务器启动是基于一个 server.xml 文件的, Tomcat 启动的时候首先会启动一个 Server
   Server 里面就会启动 Service , Service 里面就会启动多个"Connector(连机器)",每个连接器都在等待客户机的连接
  当有用户使用浏览器去访问服务器上面的 Web 资源时,首先是连接到 Connector(连接器) , Connector 是不处理用户请求的
  而是将用户的请求交给一个 Engine(引擎) 去处理, Engine 接收到请求后就会解析用户想要访问的 Host
  然后将请求交给相应的 Host , Host 收到请求后就会解析出用户想要访问这个 Host 下面的哪个 Web 应用
  一个 Web 应用对应一个 Context

*互联网上的加密原理
   Tomcat 服务器启动时会启动多个 Connector , 而 Tomcat 服务器的连接器又分为加密连接器和非加密连接器
  当去访问例如 http://localhost:9090/ding/index.Jsp 时就是使用9090端口的连接器
    <Connector port="9090" protocol="HTTP/1.1"
      connectionTimeout="20000"
      redirectPort="8443" />
  这是一个没有加密的连接器,请求过程是不加密的
  1.对称加密
    采用单钥密码系统的加密方法,同一个密钥可以同时用作信息的加密和解密,这种加密方法称为对称加密,也称单钥加密
    需要对加密和解密使用相同密钥的加密算法,由于其速度快,对称性加密通常在消息发送方需要加密大量数据时使用
    对称性加密也称为密钥加密,这种加密方法的双方使用方式用同样的密钥进行加密和解密,密钥是控制加密及解密过程的指令
    算法是一组规则,规定如何进行加密和解密,加密的安全性不仅取决于加密算法本身,密钥管理的安全性更是重要
    加密和解密都使用同一个密钥,如何把密钥安全地传递到解密者手上成了必须要解决的问题
    常用的对称加密有: DES , IDEA , RC2 , RC4 , SKIPJACK , RC5 , AES算法等
  2.非对称加密
    非对称加密需要两个密钥:公开密钥和私有密钥,公开密钥与私有密钥是一对
    如果公开密钥对数据进行加密,只有对应的私有密钥才能解密
    如果用私有密钥对数据进行加密,那么只有用对应的公开密钥才能解密
    因为加密和解密使用的是两个不同的密钥,所以这种算法叫作非对称加密算法
    非对称加密算法实现机密信息交换的基本过程:
      a.甲方生成一对密钥并将其中的一把作为公用密钥向其它方公开
      b.得到该公钥密钥的乙方使用该密钥对机密信息进行加密后再发送给甲方
      c.甲方再用自己保存的另一把专用密钥对加密后的信息进行解密
      d.另一方面,甲方可以使用乙方的公钥对机密信息进行签名后再发送给乙方
      e.乙方再用自己的私钥对数据进行验签
    非对称加密工作原理:
      a. A 要向 B 发送信息, A 和 B 都要产生一对用于加密和解密的公钥和私钥
      b. A 的私钥保密, A 的公钥告诉 B ; B 的私钥保密, B 的公钥告诉 A
      c. A 要给 B 发送信息时, A 用 B 的公钥加密信息,因为 A 知道 B 的公钥
      d. A 将这个消息发送给 B(已经用 B 的公钥加密信息)
      e. B 收到消息后, B 用自己的私钥解密 A 的信息,其它所有收到这个报文的人都无法解密,因为只有 B 有私钥
    发送方使用接收方的公钥对数据加密,而接收方则使用自己的私钥解密,这样,信息就可以安全无误地到达目的地了
    即使被第三方截获,由于没有相应的密钥,也无法进行解密,通过数字的手段保证加密过程是一个不可逆过程,即只有用私钥才能解密
    非对称加密依然没有解决数据传输的安全性问题
    比如 A 想向 B 发数据, B 首先生成一对密钥(公钥和密钥),然后将公钥发给 A
     A 拿到 B 发给它的公钥后就可以使用公钥加密数据后发给 B
    然而 B 公钥发送给 A 的过程中很有可能被第三方 C 截获, C 截获到 B 的公钥后也使用 B 的公钥加密数据然后发送给 B
     B 接收到数据后就晕了,因为无法判断接收到的数据到底是 A 发的还是 C 发的
    另外当 C 截获到 B 发的公钥后, C 可以自己生成一对密钥,然后发给 A , A 拿到公钥后就以为是 B 发给它的
    然后就使用公钥加密数据发送给 B ,而 B 收到 A 发给它的数据后反而解不开了,因为数据是用 C 的公钥加密的
     B 没有 C 的密钥,所以无法解密
    综上所述,非对称加密存在一个问题:
       A 想向 B 发数据, A 如何确定拿到的公钥一定是 B 发的呢?如何解决这个问题呢?
      只能靠第三方机构( CA 机构,即证书授权中心( Certificate Authority ),或称证书授权机构)来担保
       A 想向 B 发数据, B 首先将公钥发给 CA 机构, CA 机构拿到 B 的公钥后跑到 B 的家里问:这是你发的公钥吗?
       B 确认后说是的,此时 CA 机构就会为 B 的公钥做担保,生成一份数字证书给 B ,数字证书包含了 CA 的担保认证签名和 B 的公钥
       B 拿到 CA 的这份数字证书后就发给 A , A 拿到数字证书后,看到上面有 CA 的签名,就可以确定当前拿到的公钥是 B 发的
      那么就可以放心大胆的使用公钥加密数据并发送给 B 了

* https 连接器
  浏览器与服务器交互时,浏览器想将数据加密后再发送给服务器前首先要向浏览器出示一份数字证书
  浏览器收到证书后就可以使用数字证书里面的公钥加密数据,故要想做浏览器和服务器的加密数据传输,首先得针对服务器生成一份数字证书
  然后再配置服务器,让服务器收到浏览器的请求之后会向浏览器出示它的数字证书
  1.生成 Tomcat 服务器的数字证书
     SUN 公司提供了制作证书的工具 keytool ,在 JDK1.4 以后的版本中都包含了这一工具
    它的位置在 <JAVA_HOME>\bin\keytool.exe
    首先进入上述目录下,执行 keytool -genkey -alias tomcat -keyalg RSA 生成一个名为 tomcat 的证书,存放在 .keystore 这个密钥库中
    执行 keytool -importkeystore -srckeystore C:\Users\44454\.keystore -destkeystore C:\Users\44454\.keystore -deststoretype pkcs12
    此名命令的两处路径按实际调整,此路径即数字证书的路径
    第一次使用它会要求你输入源密钥库口令,直接输入回车即可,紧接着会要求设置相关密码,随意设置,勿忘即可
    在包含数字证书的目录下输入 keytool -list -keystore .keystore 即可查看所有证书

Q:通过命令提示符输入 keytool 时提示'keytool'不是内部或外部命令...,如何配置环境变量?
A:获取 keytool.exe 所在的路径,在用户变量的 path 中添加即可

* 配置 https 连接器
  将生成的 .keystore 密钥库文件拷贝到 Tomcat 服务器的 conf 目录下
  打开 server.xml ,注释原有 <Connector> 标签所有内容并添加如下代码
    <Connector port="9060" protocol="org.apache.coyote.http11.Http11NioProtocol"
			maxThreads="150" SSLEnabled="true" scheme="https" secure="true"
			clientAuth="false" sslProtocol="TLS"
			keystorefile="conf/.keystore" keystorePass="[你的密钥库的访问密码,我就不明写了]"/>
  在 server.xml 文件中配置了一个端口是 9060 的加密连接器,浏览器访问 9060 端口的连接器时将会以加密的方式来访问 Web 服务器
  这个连接器收到浏览器的请求后将会向浏览器出示一份数字证书,浏览器再用数字证书里面的公钥来加密数据
   keystorefile="conf/.keystore" 用来指明密钥库文件的所在路径,服务器从密钥库中提取证书时需要密码
   keystorePass="[你的密钥库的访问密码,我就不明写了]" 指明密钥库的访问密码
  当你访问 https://localhost:9060/ 时浏览器会提醒你"该网站不安全","证书无效","此CA根目录证书不受信任"等等一些信息
  在配置的过程中犯了一个小错误:
    修改本地 Tomcat 的 server.xml 后去执行 Eclipse 的 Server ,导致无法访问以达到最终效果
    最后是通过端口不一致意识到原因:我运行的是旧 Server
    当你编辑本地的 Tomcat 之后需要重新创建 Server 或 手动修同步旧 Server
  *建议学习 Web 开发时不要使用 https ,以免造成不必要的麻烦

* 安装数字证书
  为了让浏览器信任我们生成的数字证书,需要将数字证书安装到浏览器中
  平时访问一些加密网站之所以不需要自己安装证书,是因为系统或浏览器已经提前安装了一些受信任机构颁发的证书
  但当访问一些个人或组织自己签发证书的网站的时候,就会收到浏览器发出的警告
  此时可以将该证书添加到"受信任的根证书颁发机构"存储区,即将证书添加到 Windows 证书管理器的"受信任的根证书"目录中
  1.为什么要自己签发安全证书( Self-signed CA )呢?
    因为一些受信任机构颁发的证书年费通常不菲,而且有些时候公司或组织内部小范围使用的没有信任问题,这时候就可以自己签发一个安全证书
    对于这种安全证书能否被信任就需要用户自己去识别了
   Chrome 使用的是 Windows 系统里的证书,没有独立的证书存储单元
   Chrome -> 设置 -> 高级 -> 管理证书 -> 导入 ->> 选择数字证书 ->> 证书存储项选择"受信任的根证书颁发机构" ->> 完成
  在"个人"栏里是看不到你添加的证书的,切换到"受信任的根证书颁发机构"才可以寻找到
  重启 Chrome 使用 https... 访问网站,虽然依旧提示"不安全",但证书信息发生了改变,不在提示此证书不受信任
  删除证书?略

Q:什么是 HTTP 协议?
A: HTTP 是 hypertext transfer protocol(超文本传输协议) 的缩写
  他是 TCP/IP 协议的一个应用层协议,用于定义 Web 浏览器与 Web 服务器之间交换数据的过程
  客户端连上 Web 服务器后,若想获得 Web 服务器中的某个 Web 资源,须遵守一定的通讯格式
   HTTP 协议用于定义客户端与 Web 服务器通讯的格式

*  HTTP 协议的版本: HTTP/1.0 , HTTP/1.1

Q: HTTP/1.0 与 HTTP/1.1 有何区别?
A:在 HTTP/1.0 协议中,客户端与 Web 服务器建立连接后,只能获得一个 Web 资源
  在 HTTP/1.1 协议中,允许客户端与 Web 服务器建立连接后,在每个连接上获得多个 Web 资源

Q:如何使用 telnet 模拟 HTTP 请求?
A: HTTP 响应: cmd -> curl www.baidu.com -o baidu

Q: HTTP 请求包含哪些内容?
A:客户端连上服务器后,向服务器请求某个 Web 资源,称为客户端向服务端发送了一个请求
  一个完整的 HTTP 请求包括:
    1.请求行:用于描述客户端的请求方式,请求资源名称,以及使用的 HTTP 协议版本号
      请求行中的 GET 称之为请求方式(POST,GET,HEAD,OPTIONS,DELETE,TRACE,PUT),默认请求方式为 GET
    2.若干消息头:用于描述客户端请求哪台主机,以及客户端的一些环境信息等
       accept:浏览器通过这个头告诉服务器,他所支持的数据类型
       Accept-Charset:支持字符集的类型
       Accept-Encoding:支持的压缩格式
       Accept-Language:语言环境
       Host:访问的主机
       If-Modified-Since:缓存数据的时间
       Referer:来自哪个页面,防止盗链
       Connection:请求完毕后是断开连接还是保持连接

Q:命令提示符输入 telnet 提示 "'telnet' 不是内部或外部命令,..."如何解决?
A:打开控制面板 -> 程序 -> 启用或关闭 Windows 功能 -> 勾选 Telnet Client -> 确定

Q:如何使用 telnet 模拟 HTTP 响应?
A: HTTP 响应: cmd -> telnet -> o www.chrono.com 80

Q: HTTP 响应包含哪些内容?
A:一个 HTTP 响应代表服务器向客户端回送的数据,它包括:
    1.状态行:用于描述服务器对请求的处理结果
      格式: HTTP/版本号 状态码 原因叙述<CRLF>
      eg: HTTP/1.1 200 OK
        状态码    含义
        100~199:表示成功接收请求,要求客户端继续提交下一次请求才能完成整个处理过程
        200~299:表示成功接收请求并已完成整个处理过程,常用200
        300~399:为完成请求,客户需要一步细化请求,如:请求的资源已经移动一个新地址,常用302,307,304
        400~499:客户端的请求有错误,常用404
        500~599:服务端出现错误,常用500
    2.多个消息头:用于描述服务器的基本消息,以及数据的描述
      服务器通过这些数据的描述信息可以通知客户端如何处理它回送的数据
      常用消息头
         Location:服务器通过这个头,告诉浏览器跳到哪里
         Server:服务器通过这个头,告诉浏览器服务器的型号
         Content-Encoding:服务器通过这个头,高所浏览器数据的压缩格式
         Content-Length:...,告诉浏览器会送数据的长度
         Content-Language:...,告诉浏览器语言环境
         Content-Type:...,告诉浏览器回送数据的类型
         Refresh:...,告诉浏览器定时刷新
         Content-Disposition:...,告诉浏览器以下载方式打开数据
         Transfer-Encoding:...,告诉浏览器数据是以分块方式回送的
         Expires:-1,控制浏览器不要缓存
         Cache-Control: no-cache
         Pragma: no-cache
    3.实体内容:服务器向客户端回送的数据

Q:如何在服务端设置响应头来控制客户端浏览器的行为?  --MyEclipse
A:1.设置 Location 响应头,实现请求重定向(这部分博客没有详细写...)
    展开 Java Resources -> src ,右键 -> New -> Package 创建一个包,右键创建的包 -> New -> Servlet
    新创建的 java 文件包含 doGet() 和 doPost()
    注释掉 doGet() 原有的代码,按需求选择以下其中之一,添加如下代码
      a.请求转发
         request.setAttribute("list", "listValue");
                                变量名      值
         request.getRequestDispatcher("index.Jsp").forward(request, response);
                                      对应 Jsp 文件
        当然你得在对应的 Jsp 文件的<boby></body> 标签添加 <%=request.getAttribute("list") %> 才有效果
         eg:<body>
              <%=request.getAttribute("list") %>
            </body>
        在浏览器里输入 eg:http://localhost:9090/ding/ServletDemo1
        特点:
          <1>.地址栏不会改变
          <2>.在最终 Servlet 中, request 对象和中转的那个 request 是同一个对象
          <3>.只能转发给当前 Web 应用的资源
          <4>. / 代表的是当前 Web 应用的根目录
      b.重定向
         response.sendRedirect("1.Jsp");
        在浏览器里输入 eg:http://localhost:9090/ding/ServletDemo1 时会跳转至指定地址,并且地址栏也会随之发生改变
        特点:
          <1>.地址栏为最后响应的地址
          <2>.在最终 Servlet 中, request 对象和中转的那个 request 不是同一个对象
          <3>.可以重定向至任何资源
          <4>. / 代表的是当前 Web 站点的根目录
  2.设置 Content-Encoding 响应头,告诉浏览器数据的压缩格式
    略
  3.设置 Content-Type 响应头,指定回送数据类型
    略
  4.设置 Refresh 响应头,让浏览器定时更新
    略
  5.设置 Content-Disposition 响应头,让浏览器下载文件
    略

Q:什么是 Servlet ?
A: Servlet 是 SUN 公司提供的一门用于开发动态 Web 资源的技术
   SUN 公司在其中提供了一个 Servlet 接口,用户想要用它发送一个 Web 资源(即开发一个 Java 程序向浏览器输出数据)
  需要完成以下2个步骤:
     1.编写一个 Java 类,实现 Servlet 接口
     2.把开发好的 Java 类部署到 Web 服务器中
  按照一种约定俗成的称呼习惯,通常也把实现了 Servlet 接口的 Java 程序称为 Servlet

Q:详述 Servlet 的运行过程
A: Servlet 程序是由 Web 服务器调用, Web 服务器收到客户端的 Servlet 访问请求后
    1. Web 服务器首先检查是否已经装载并创建了该 Servlet 的实例对象
    2.装载并创建该 Servlet 的一个实例对象
    3.调用 Servlet 实例对象的 init() 方法
    4.创建一个用于封装 HTTP 请求消息的 HttpServletRequest 对象和一个代表 HTTP 响应消息的 HttpServletResponse 对象
      然后调用 Servlet 的 Service() 方法并将请求和响应对象作为参数传递进去
    5. Web 应用程序被停止或重新启动之前, Servlet 引擎将卸载 Servlet ,并在卸载之前调用 Servlet 的 destroy() 方法
     Servlet 调用图:
     http://...
         |
       浏览器                                         Web 服务器                                                              Servlet
         |-------------- 1.连接 Web 服务器 -------------->|                                                                       |
         |-------------- 2.发送 Http 请求 --------------->|                                                                       |
         |                                     3.解析客户端想访问的主机                                                            |
         |                                     4.解析客户端想访问的 Web                                                            |
         |                                     5.机械客户端想访问的 Web 资源                                                       |
         |                                                |-- 6.若 Servlet 是第一次访问则服务器会加载 Servlet并创建 Servlet 对象 -->|
         |                                                |--------------------- 7.调用 Servlet 的 init方法 --------------------->|
         |                                                |------------------- 8.调用 Servlet 的 Service 方法 ------------------->|
         |                                                |                                                    9. Service 方法执行,把数据写到 Response 中
         |<- 10. Web 服务器取出 Response 数据回送给浏览器 --|<----------------------------------------------------------------------|

Q:如何在 Eclipse 中开发 Servlet ?
A:在 Eclipse 中新建一个 Web Project 工程, Eclipse 会自动创建相应的目录结构
   Servlet 接口实现类
     Servlet 接口 SUN 公司定义了两个默认实现类,分别为: GenericServlet , HttpServlet
     HttpServlet 指能够处理 HTTP 请求的 Servlet ,它在原有 Servlet 接口上添加了一些与 HTTP 协议处理方法,它比 Servlet 接口的功能更强大
    因此开发人员在编写 Servlet 时通常继承这个类,而避免直接去实现 Servlet 接口
    HttpServlet 在实现 Servlet 接口时,覆写了 Service 方法,该方法体内的代码会自动判断用户的请求方式,如 GET 请求,则调用 HttpServlet 的 doGet 方法
    若为 POST 请求,则调用 doPost 方法,因此开发人员在编写 Servlet 时,通常只需要覆写 doGet 或 doPost 方法,而不需要覆写 Service 方法
  通过 Eclipse 创建和编写 Servlet
    右键 src(或其下的包) -> New -> Servlet ,若 New 下没有 Servlet 则 右键 src(或其下的包) -> New -> Other... -> Web -> Servlet
    继承 HttpServlet 类,勾选 doGet() 和 doPost(), Eclipse 的版本差异会将一个创建页面拆分成几个创建页面,但基本操作是一样的
   Servlet 访问 URL 映射配置
    由于客户端是通过 URL 地址访问 Web 服务器中的资源,所以 Servlet 程序若想被外界访问,必须把 Servlet 程序映射到一个 URL 地址上
    这个工作在 web.xml 文件中使用 <servlet> 元素和 <servlet-mapping> 元素完成
     <servlet> 元素用于注册 Servlet ,它包含有两个主要的子元素, <servlet-name> 和 <servlet-class>
    分别用于设置 Servlet 的注册名称和 Servlet 的完整类名
    一个 <servlet-mapping> 元素用于映射一个已注册的 Servlet 的一个对外访问路径,它包含有两个子元素: <servlet-name> 和 <url-pattern>
    分别用于指定 Servlet 的注册名称和 Servlet 的对外访问路径
    同一个 Servlet 可以被映射到多个 URL 上,即多个 <servlet-mapping> 元素的 <servlet-name> 子元素的设置值可以是同一个 Servlet 的注册名
    重启 Tomcat 生效
    (详见 web.xml )    
   Servlet 访问 URL 使用 * 通配符映射
    可以使用任意的 URL 访问此 Servlet
    重启 Tomcat 生效
    (详见 web.xml )
  匹配的原则是谁长得最像就找谁
   Servlet 与普通 Java 类的区别
     Servlet 是一个供其它 Java 程序( Servlet 引擎)调用的 Java 类,它不能独立运行,它的运行完全由 Servlet 引擎来控制和调度
    针对客户端多次 Serlet 请求,通常情况下,服务器只会创建一个 Servlet 实例对象,即 Servlet 实例对象一旦创建
    它就会驻留在内存中,为后续的其它请求服务,直到 web 容器推出, Servlet 实例对象才会销毁
    在 Servlet 的整个生命周期内, Servlet 的 init 方法只被调用一次,而对一个 Servlet 的每次访问请求都导致 Servlet 引擎用一次 Servlet 的 Service 方法
    对于每次访问请求, Servlet 引擎都会创建一个新的 HttpServletRequest 请求对象和一个新的 HttpServletResponse 响应对象
    然后将这两个对象作为参数传递给它调用的 Servlet 的 Service 方法, Service 方法再根据请求方式分别调用 doXXX 方法 
    如果在 <servlet> 元素中配置了一个 <load-on-startup> 元素,那么 Web 应用程序在启动时就会装载并创建 Servlet 的实例对象以及调用 Servlet 实例对象的 init 方法  
       <load-on-startup>1</load-on-startup>
         load-on-startup 元素标记容器是否在启动的时候就加载此 Servlet 
        它的值必须是一个整数,表示 Servlet 应该被载入的顺序
        当值为0或大于0时,表示容器在启动时就加载并初始化此 Servlet
        当值小于0或没有指定时,则表示容器在该 Servlet 被请求时才会去加载
        (优先级高,优先加载)0,1,2,3,4,5...(优先级低),优先级相等时容器自动选择
        通常大多数 Servlet 是在用户第一次请求的时候由应用服务器创建并初始化,可使用此元素根据自己需要改变加载的优先级
    (详见 web.xml )
  缺省 Servlet
    若某个 Servlet 的映射路径仅仅为一个正斜杠 / ,那么此 Servlet 就成为当前 Web 应用程序的缺省 Servlet
    所有在 web.xml 文件中找不到匹配的 <servlet-mapping> 元素的 URL ,它们的访问请求都将交给缺省 Servlet 处理
    即缺省 Servlet 用于处理所有其它 Servlet 都不处理的访问请求,与使用 * 通配符映射的效果类似
    (详见 web.xml )
   Servlet 的线程安全问题
    当多个客户端并发访问同一个 Servlet 时, Web 服务器会为每一个客户端的访问请求创建一个线程,并在这个线程上调用 Servlet 的 Service 方法
    因此 Service 方法内如果访问了同一个资源的话就会可能引发线程安全问题
    运行代码时用两个不同的浏览器测试
    线程安全只存在多个线程并发操作同一个资源的情况下,所以在编写 Servlet 的时候,如果并发访问某个资源就会存在线程安全问题
    (详见 ServletDemo2.java )
    解决方法:
       synchronized 加锁  ( 详见 ServletDemo2.java )       
       (待补充)


Q:启动 Server 时提示端口占用如何解决?
A: cmd -> netstat -aon|findstr "[被占用的端口号]" -> 得到进程号 -> ctrl+shift+esc -> 详细信息 -> PID==进程号 -> 右键结束即可
                                                      |-> tasklist|findstr "[进程号]" -> 得到进程名称 -> ctrl+shift+esc -> 详细信息 -> 名称==进程名称 -> 右键结束即可
                                                      |-> taskkill /pid [进程号] /f (/f:强制)  |-> taskkill /f /t /im [进程名称]
  当然,还有其它方法(上述方法花里胡哨的对吧),直接打开任务管理器结束 javaw.exe 也可以(仅针对"启动 Server 时提示端口被占用"问题)
                                                                              
Q:如何连接 mysql ?
A:( 导入 jar 包见mysql.txt ,代码详见 JavaMySQL.java )

*  statement 对象
   JDBC 中的 statement 对象用于向数据库发送 SQL 语句,想完成对数据库的增删改查只需要通过这个对象向数据库发送增删改查的语句即可
   statement 对象的 executeUpdate 方法用于向数据库发送增删改查的 SQL 语句, executeUpdate 执行完毕后将返回一个整数(数据库发生变化的行数)
   statement.executeQuery 方法用于向数据库发送查询语句, executeQuery 方法返回查询结果的 ResultSet 对象

*  preparedStatement 对象
   preparedStatement 是 statement 子类,它的实例对象可以通过调用 connection.preparedStatement() 方法获得
  相对于 statement 对象而言可以避免 SQL 注入问题
   statement 会使数据库频繁编译 SQL ,可能造成数据库缓冲区溢出
   preparedStatement 可对 SQL 进行预编译,从而提高数据库的执行效率
  并且 preparedStatement 对于 SQL 中的参数允许使用占位符的形式进行替换以简化 SQL 语句的编写  

* 配置 Servlet 参数
  在

Q:什么是 ServletConfig ?
A:打开 web.xml ,使用一个或多个 <init-param> 标签为 Servlet 配置一些初始化参数
  当 Servlet 配置了这些初始化参数后, Web 容器在创建 Servlet 实例对象时,会自动将这些初始化参数封装到 ServletConfig 对象中,并在调用 Servlet 方法时
  将 ServletConfig 对象传递给 Servlet ,通过 ServletConfig 对象就可以得到当前 Servlet 的初始化参数信息
  (详见 web.xml ServletDemo3.java 别忘了映射!!!且必须通过 Servlet 的对外访问路径进行访问才有效!!! ) 

Q:什么是 ServletContext ?
A: Web 容器在启动时,它会为每个 Web 应用程序都创建一个对应的 ServletContext 对象,它代表当前 Web 应用
   ServletConfig 对象中维护了 ServletContext 对象的引用,开发人员在编写 Serlvet 时
  可以通过 ServletConfig.getServletContext 方法获得 ServletContext 对象
  由于一个 Web 应用中的所有 Servlet 共享一个 ServletContext 对象,因此 Servlet 对象之间可以通过 ServletContext 对象来实现通讯
   ServletContext 对象通常也被称之为 Context 域对象
  应用:
    多个 Servlet 通过 ServletContext 对象实现数据共享(详见 ServletDemo4.java )
    获取 Web 应用的初始化参数(详见 ServletDemo4.java )
    用 ServletContext 实现请求转发(详见 ServletDemo5.java )
    利用 ServletContext 对象读取资源文件与使用类装载器读取资源文件(详见 ServletDemo5.java db1.properties )
  在客户端缓存 Servlet 的输出
    对于不经常变化的数据,在 Servlet 中可以为其设置合理的缓存时间值,以免浏览器频繁向服务器发送请求,提升服务器的性能
    云里雾里(详见 ServletDemo5.java )

* 当你重命名 Servlet 后 不要忘记更改 @WebServlet 属性

Q:什么是 properties 文件?
A:后缀 properties 是一种属性文件,这种文件以 key=value 格式存储内容
   Java 中可以使用 Properties 类读取此类文件, String value=p.getProperty(key)
  用此文件作为部分参数的存储使代码更灵活,有利于代码重构,维护方便

*  HttpServletResponse 请求
   Web 服务器收到客户端的 Http 请求,会针对每一次请求分别创建一个用于代表请求的 Request 对象和代表响应的 Response 对象
  当想要获取客户机提交过来的数据时只需调用 Request 对象即可,向客户机输出数据只需调用 Response 对象即可
   HttpServletResponse 对象代表服务器的响应,这个对象中封装了向客户端发送数据,发送响应头,发送响应状态码的方法
   HttpServletResponse 对象常见应用
    使用 OutputStream 流向客户端浏览器输出中文数据
    使用 PrintWriter 流向客户端浏览器输出中文数据
    使用 OutputStream 或 PrintWriter 向客户端浏览器输出数字
    文件下载:
      1.获取待下载的文件的绝对路径
      2.获取待下载的文件名
      3.设置 context-disposition 响应头控制浏览器并以下载的形式打开文件
      4.获取待下载的文件输入流
      5.创建数据缓冲区
      6.通过 Response 对象获取 OutputStream 流
      7.将 FileInputStream 流写入到 Buffer 缓冲区
      8.使用 OutputStream 将缓冲区的数据输出到客户端浏览器(建议使用其它方法)
    生成验证码
    设置响应头控制浏览器的行为
      1.设置 Http 响应头控制浏览器禁止缓存当前文档内容
      2.设置 Http 响应头控制浏览器定时刷新网页
      3.头通过 Response 实现请求重定向
    ( 详见 ResponseDemo1.java )

*  Web 工程中 URL 地址的推荐写法
  在 JavaWeb 开发中,只要是写 URL 地址,那么建议最好以"/"开头,即使用绝对路径方式
  "/"相对服务器来说代表当前的 Web 工程
  "/"相对浏览器来说代表 Webapps 目录

* 使用 ${pageContext.request.contextPath} 或 request.getContextPath() 代替 Web 目录,即两者获取到的都是"/项目名称"

*  Response 细节问题
   getOutputStream 和 getWriter 方法分别用于得到输出二进制数据 ServletOutputStream 和 输出数据 PrintWriter 对象
   getOutputStream 和 getWriter 这两个方法互斥,调用其中一个则不可调用另一个
   Servlet 程序向 ServletOutputStream 或 PrintWriter 对象中写入的数据将被 Servlet 引擎从 Response 里获取
   Servlet 引擎将这些数据当作响应消息的正文,然后再与响应状态行和各响应头组合后输出到客户端
   Servlet 的 Service 方法结束后, Servlet 引擎将检查 getWriter 或 getOutputStream 方法返回的输出流对象是否已经调用过 close 方法
  如果没有那么 Servlet 引擎将调用 close 方法关闭该输出流对象
  
* 如何防止表单重复提交?
  出现表单重复提交的情况:
    1.网速延迟并多次点击提交按钮
    2.提交表单后刷新(刷新动作会将你之前的操作再执行一遍)
    3.提交后点击后退再次提交(后退并不能撤销提交)
  利用 JavaScript 防止表单重复提交(在客户端解决)
    定义一个变量,通过变量值来判断是否允许提交,但作用仍然有限
  利用 Session 防止表单重复提交(在服务端解决)
    在服务端生成一个唯一的随机标识号(令牌),同时在当前用户的 Session 域中保存这个 Token
    然后将 Token 发送到客户端的 Form 表单中,在 Form 表单中使用隐藏域来储存这个 Token
    表单提交的时候连同这个 Token 一起提交到服务器端,然后在服务器端判断客户端提交上来的 Token 与服务器端生成的 Token 是否一致
    若不一致,那就是重复提交,此时服务器就不可以重复处理提交的表单
    若一致,处理完后清除当前用户的 Session 域中存储的标识号

Q:当你删除 xxx 项目后再在相同目录下重新以 xxx 名创建新项目时 Eclipse 提示该项目 
A: File -> Switch Workspace -> Other... -> Recent Workspaces ,右键点击即可移除
  当你选择一个已被删除的 Workspace 时 Eclipse 会再次自动创建它,及时删除无效 Workspace

* 创建项目时一定要选对 Workspace ,否则两行泪

Q:什么是 MVC 设计模式?
A: Model-View-Controller 的简称,即模型-视图-控制器,它把应用程序分为三个核心模块,各自处理自己的任务
    模型
      是应用程序的主体部分,表示业务数据和业务逻辑
      一个模型能为多个视图提供数据,由于应用模型的代码只需要写一次就可以被多个视图重用,所以提高了代码的可重用性
    视图
      即用户看到并与之交互的界面,可以向用户显示相关的数据,也可以接收用户的输入,但是不能进行实际的业务处理
    控制器
      接受请求,获取请求参数,调用 Dao 方法,决定了用哪个模型组件去处理请求,然后决定调用哪个视图来显示模型处理返回的数据
   MVC 模式处理过程逻辑在 Servlet 中,显示交给 Jsp 
  服务器调用 Servlet , Servlet 作为一个控制器接收请求,根据请求的相关逻辑情况去调用 Java 类的方法
  由 Java 类完成业务逻辑和访问数据库的操作,然后 Servlet 根据 POJO(简单的 Java 对象,即 JavaBeans ) 返回结果转向不同的界面, Jsp 完成显示功能
   JavaWeb MVC 结构
     src
      |--- Controller   主要负责前端连接的分发控制,主要返回 Jsp 文件,调用 Service 方法
      |--- Dao          负责数据库的连接以及 CURD
      |--- Service      处理数据库信息以及书写逻辑和计算的主要场所
      |--- target       测试类
  (详见)

Q: JavaWeb 项目连接数据库异常,报错如下
   java.lang.ClassNotFoundException: com.mysql.cj.jdbc.Driver
   ...
A:当你在 JavaWeb 项目下写一个简单的 java 程序去测试连接数据库时发现你的程序可以正常访问并读取数据
  因为你的配置是对的,因为在之前你已经将 mysql 的 jar 包导入到了项目中
  但这对 JavaWeb 项目来说还不够
  当执行 Class.forName(JDBC) 时 Eclipse 不会去查找字符串 JDBC 查找驱动的
  也就是说你去掉这段代码才是正常操作(被之前连接数据库操作害惨了)
  你还需把 jar 包拷贝到 Tomcat 的 lib 目录下

Q: 什么是 JSON ?
A: JOSN(JavaScript Object Notation) 是一种轻量级的数据交换格式
  易于理解和编写,同时也易于机器解析和生成
  它基于 JavaScript 的一个子集
   JSON 采用完全独立于语言的文本格式,但也使用了类似于 C 语言家族的习惯,使得 JSON 成为理想的数据类型
   JSON 的两种类型:
    对象, object -> {key1:value1,key2:value2,...}
    数组, array -> [value1,value2,value3,...]
   GSON 解析 JSON 的两种类型:
    直接在内存中生成 object 或 array ,通过指定 key 获取值
    借助 JavaBean 进行映射获取值

Q:什么是 GSON ?如何使用?
A: GSON 弥补了 JSON 的许多不足,实际应用中更适用于 JavaWeb 开发
  利用 GSON 来操作 Java 对象和 JSON 数据之间转换,包括常见的对象序列化和反序列化
  (详见 UserController.java )

Q: Eclipse 怎么导入第三方包?
A:普通 Java 程序
    右键项目 -> Build Path -> Configure Build Path -> Libraries -> Add External JARs... -> 选择第三方 jar 包 -> Apply and Close
   JavaWeb 项目
    (同上)
    另外再把 jar 包复制一份到 Tomcat 的 lib 目录下

<
刚刚看到了一个有意思的文章,谈论的问题是"为什么动物不睡觉就会死?"
文章说果蝇被"困死"的前几天它的肠内会积累大量 ROS 分子,且是由肠产生,且会在缺觉时大量积累
小鼠缺觉也会发生同样现象,表明哺乳动物也拥有同样机制
当服用一些能中和 ROS 活性的抗氧化剂能使缺觉的果蝇活到正常水平,即能和正常果蝇一样活约40天
但给正常果蝇服用则无延长寿命作用
有哪些抗氧化剂呢?
褪黑素,硫辛酸,NAD(酶,烟酰胺腺嘌呤二核苷酸)
当然维生素C,维生素E,尿酸,谷胱甘肽也作为细胞抗氧化物质发挥重要作用
 ROS 是什么?
当然是 ROS(Roboot Operating System) 机器人操作系统啊 ×
ROS(Reactive oxygen species) 活性氧类 √
是生物有氧代谢过程中的一种副产品,包括氧离子,过氧化物,含氧自由基等
这些粒子相当微小,由于存在未配对的自由电子,故十分活跃,具有很强的化学反应活性
当然它在细胞信号传导和保持机体恒温性起着很大作用
过高的活性氧水平会对细胞和基因结构造成损坏
 ROS 也可能由外界因素生成,如致电离辐射
>

Q:如何使用 Ajax 向 Servlet 发送数据,然后再将数据返回给 Ajax ?
A: Servlet 部分
  	UserService userdao=new UserService();
		List<User> user=userdao.select();
		Gson gson=new Gson();
		String result=gson.toJson(user);
		response.getWriter().print(result);
   HTML 部分
    var pathArray = window.location.pathname.split('/');
    var secondLevelLocation = pathArray[1];
    var loginUrl = window.location.protocol + "//"  + window.location.host + "/"+ secondLevelLocation;
    console.log(loginUrl);
    $.ajax({
        type: 'POST',
        url: loginUrl+"/UC",
        dataType: 'json',
        success: function (json) {
            console.log(json);
        },
        error:function(xhr,status,error){
          console.log("状态码:"+xhr.status+
              ",状态:"+xhr.readyState+
              ",错误信息:"+xhr.statusText+
              ",返回响应信息:"+xhr.responseText+
              ",请求状态:"+status+
              ",error:"+error);
        }
    });
   Jsp 部分
  $(function() {
    $.ajax({
        type: 'POST',
        url: "${pageContext.request.contextPath}/UC",
        dataType: 'json',
        success: function (json) {
            console.log(json);
        },
        error: function () {
            alert("数据加载失败");
        }
    });
  });
  (详见 UserController.java )

Q: Java 如何使用 md5 加密?
A: Java 不像 PHP 那样直接使用 md5(str) 就完了
  你需要自己写一个 md5() 
    public static String md5(String str) {
      byte[] digest = null;
      MessageDigest md5;
      String md5Str=null;
      try {
        md5 = MessageDigest.getInstance("md5");
        digest=md5.digest(str.getBytes("utf-8"));			
      } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
      } catch (UnsupportedEncodingException e) {
        e.printStackTrace();
      }
      md5Str=new BigInteger(1,digest).toString(16);
      return md5Str;
    }

Q: Win10 自带输入法代碼打著打著就變成了繁體字怎麽拌?
A: ctrl+shift+f 即可实现简/繁切换,大概率因为使用了快速对齐代码的快捷键

Q:什么时会话?
A:可简单理解为用户开一个浏览器并点击多个超链接,访问服务器多个 Web 资源,然后关闭浏览器,整个过程称之为一个会话

Q:如何保存会话数据?
A:保存会话数据的两种技术
     Cookie
       Cookie 是客户端技术,程序把每个用户的数据以 Cookie 的形式写给用户各自的浏览器
      当用户使用浏览器再去访问服务器中的 Web 资源时就会带着各自的数据去
      这样, Web 资源处理的就是用户各自的数据了
      可用来存储一些状态信息等等
     Session
       Session 是服务器端技术,利用这个技术服务器在运行时可以为每一个用户的浏览器创建一个其独享的 Session 对象
      由于 Session 为用户浏览器独享,所以用户在访问服务器的 Web 资源时,可以把各自的数据放在各自的 Session 中
      当用户再去访问服务器中的其它 Web 资源时,其它 Web 资源再从用户各自的 Session 中取出数据为用户服务
      可用来存储用户相关重要信息等等
  
* 最近尝试着将自己的毕设( PHP )改用 Java 写一遍
  出现了一个有意思的问题:
  登录界面使用 Ajax 请求 Servlet , Servlet 判断后返回结果
  若登录成功则跳转另一个页面(请求转发或重定向),若失败返回 false 给 Ajax
  由于可以在 Servlet 内可实现页面跳转,于是就想改变 PHP 中的写法:在前端的 js 中实现页面跳转
  问题出现在了"跳转页面"这儿,百度之后得到结果,而且博客的内容说的正如上所描述的
  首先,使用 Ajax 的目的是局部更新,而我却欲用作页面跳转
  另外 Servlet 拿到的是 Ajax 发送过来的 Request ,即这个请求不是浏览器请求的,所以对此请求无法进行请求转发或重定向
  解决方法:
    在 js 中实现页面跳转
    location.href="index.html";

*  JavaWeb 如何实现文件的上传与下载?
  虽然可以使用 Servlet 获取上传文件的输入流然后再解析里面的请求参数,但这过于繁琐
  一般采用 Apache 的开源工具 common-fileupload 这文件上传组件
   common-fileupload 依赖于 common-io 包
  这个两个组件的 jar 包需要去 Apache 官网上下载
   http://mirrors.hust.edu.cn/apache/commons/fileupload/binaries/
   http://mirrors.hust.edu.cn/apache/commons/io/binaries/
  点击 zip 下载解压并放入 Tomcat 和你项目的 WEB-INF 下的 lib 中

Q:上传文件资源"成功"但未在文件夹中找到上传的文件资源?
A:模仿网上博客的代码仿写上传文件功能
  后端无报错和异常抛出并打印"上传成功"但未在指定目录下找到被上传的文件资源
  当打印输出指定存储文件资源的路径的时候发现异常
  代码:
  	String saveImgPath=this.getServletContext().getRealPath("/Data/img");
		System.out.println("saveImgPath:"+saveImgPath);
  控制台:
    saveImgPath:D:\GitHub\Java\Code\.metadata\.plugins\org.eclipse.wst.server.core\tmp1\wtpwebapps\Muke\Data\img
  我的 Workspace 是 Code ,而后面的并不是我想要存储资源的路径
  使用 Eclipse 创建 Server 并启动该 Server 发布项目其实并未将工程发布到 Tomcat 安装目录所在的 webapps 下
  打开上述目录中的 tmp1 目录可发现其结构和 Tomcat 目录结构是一样的,只是多了一个 wtpwebapps 目录
   tmp1 就是 Tomcat 的克隆使其也能具备源服务器的功能
  如果再 new 若干个 Server 则 org.eclipse.wst.server.core 会依次出现 tmp2 tmp3 tmp4 ...
  但每次只能启动一个克隆服务器,因为它们都是用同一个启动端口,当然关闭端口也相同
  故当上传文件时就会上传到上述目录中去
  你可以将文件资源复制到 Webapps 中去浏览器就可以访问了, Tomcat 服务器默认 webapps 未工程目录而不是 wtpwebapps 目录
  之所以能够通过浏览器访问上述路径是由于 Eclipse 通过 Tomcat 发布项目的时候在 tmp1/conf/server.xml 有如下配置
    <Context docBase="D:\GitHub\Java\Code\.metadata\.plugins\org.eclipse.wst.server.core\tmp1\wtpwebapps\Muke" path="/Muke" reloadable="true" source="org.eclipse.jst.jee.server:Muke"/>
  这点也可通过 Eclipse 的 servlet 属性了解,右键 Server -> Open -> Server Location 中的 Server path 的值与上述路径一致
  手动拷贝过于复杂但 Server path 又不可修改
  解决方法:
    1.在创建 Server 时不添加任何工程
      创建完成后再右键 Server -> Open -> Server Location 中的 Server path 的值是可编辑的
      你有三种选择:
        a.使用 Eclipse 的工作空间,即本问题的一开始所提到的路径
        b.使用 Tomcat 的安装目录,即本地 Tomcat 的目录
        c.自定义路径
    2.在创建 Server 时不添加任何工程(建议使用这个)
      创建完成后再右键 Server -> Open
      勾选 Use Tomcat installtion 并且设置 Deploy path 为 webapps来定义工程部署到指定目录下
    3.最简单的方法是修改 VM arguments 的 Dwtp.deploy 属性
       Eclipse -> 右键 Run -> Run Configurations... -> Apache Tomcat -> 单击你的 Server -> Arguments -> 编辑 VM arguments

Q:每次重启 Servers 后之前上传的资源都被覆盖变为空,如何在重启 Servers 之后资源仍存在?
A:上传的文件会保存在服务器中,每次重新部署项目 Eclipse 会把工作空间 workspace 的项目拷贝到服务器下的 webapps 目录下
  新项目与旧项目同名故直接覆盖
  方法一:
    在 Tomcat 服务器的 webapps 下单独建立一个专门存放资源文件的文件夹
  方法二:
    使用虚拟路径的方式配置一个空项目,在涉及上传的时候直接把文件写到这个配置了虚拟路径的项目里,最终文件会保存到虚拟路径对应的物理盘符上
    如果是 Tomcat 服务器,在 Tomcat 的 server.xml 里配置,但在实际操作过程中会发现 server.xml 也会被重写
    因为 Eclipse 工作空间中存在一个叫 Servers 的项目,它里面有一个叫 server.xml 的文件
    在部署时,它会覆盖掉 Tomcat 服务器中的 server.xml 
    你可以进行如下配置,展开 Eclipse 工作空间下 Servers 的 Toncat , 打开 server.xml 更改 docBase 的值,即虚拟路径配置
      <Host name="localhost"  appBase="webapps" unpackWARs="true" autoDeploy="true"xmlValidation="false" xmlNamespaceAware="false">
      <!-- 虚拟路径配置 -->
      < Context docBase="D://objimgs//upload" path="/objimgs"/>
      </Host>

<
将数据存入数据库,然后用 Navicat 查看表的时候发现表依旧是空
检查了语法没问题,检查了数据库索引也没问题,程序也没报错,返回的受影响行数是正确的!
可是表依旧是空?!
看着 Navicat 窗口,把目光移到底部
...
底部显示了一条查询语句 select * from table_name limit 1000,1000 ,旁边还显示一个数字"2"，没错是第二页,在旁边还有一句话"第二页无记录"
......
>

* 我一般习惯在写 Ajax 时带上
    error:function(xhr,status,error){
      ...
    }
  方法,今天在写完一个保存更改信息的功能后进行测试的时候报错
    'load' handler took <N>ms
  查看数据库,后台,以及前台都未报错或报红,仅在前端的 Console 中发现如下信息
    [Violation] 'click' handler took <N>ms
    [Violation] 'load' handler took <N>ms
  若想不出现此信息,建议后端即使没有必要信息需要返回,不妨随意加个数据(例如处理成功)返回

* 关于上传的文件存储的问题
  在 PHP 中我是将上传的文件存储在项目下的一个文件夹中,前端读取的时候非常方便,给 src 赋值 "../xxx/xxx.xx" 即可
  但我似乎只会用而没在意细节,比如为什么是以 "../" 开头
  在 使用 Java 重写上传文件部分的时候我并没有像 PHP 那样直接放在 项目的文件夹中下,而是放在 Tomcat 之下且项目之外
  当我打算通过绝对路径去访问资源的时候发现无法读取资源,查看 img 标签的 src 地址,复制后放在浏览器的新窗口中却可以打开
  既然 src 中的地址无误且可以访问那为什么前端界面却无法读取呢?
  通过浏览器右键检查其标签,当鼠标悬停放在 src 上并 Open in new tab 时提示 404 ,浏览器显示的路径如下
    http://localhost:9090/Muke/homepage/D:/apache-tomcat-9.0.34/webapps/Data/img/2020062423491810006738.jpg
  其实正常情况 src 访问的都是相对路径(除非只是单独写一个静态 HTML 文件)
  所以当去访问 src 的路径时后台会自动添加本项目的父目录
